/* Generated By:JJTree&JavaCC: Do not edit this line. MappingMasterParser.java */
package org.protege.owl.mm.parser;

import java.util.*;

public class MappingMasterParser/*@bgen(jjtree)*/implements MappingMasterParserTreeConstants, MappingMasterParserConstants {/*@bgen(jjtree)*/
  protected JJTMappingMasterParserState jjtree = new JJTMappingMasterParserState();public String defaultLocationValue = "";
  public String defaultDataValue = "";
  public String defaultID = "";
  public String defaultLabel = "";
  public String defaultLanguage = "";
  public String defaultPrefix = "";
  public String defaultNamespace = "";

  public int defaultEntityType = OWL_CLASS;
  public int defaultPropertyType = OWL_OBJECT_PROPERTY;
  public int defaultPropertyValueType = XSD_STRING;
  public int defaultDataPropertyValueType = XSD_STRING;
  public int defaultAnnotationPropertyValueType = XSD_STRING;

  public int defaultValueEncoding = RDFS_LABEL;
  public int defaultClassValueEncoding = defaultValueEncoding;
  public int defaultPropertyValueEncoding = defaultValueEncoding;
  public int defaultObjectPropertyValueEncoding = defaultValueEncoding;
  public int defaultDataPropertyValueEncoding = defaultValueEncoding;
  public int defaultIndividualValueEncoding = defaultValueEncoding;
  public int defaultShiftSetting = MM_NO_SHIFT;
  public int defaultEmptyLocationSetting = MM_PROCESS_IF_EMPTY_LOCATION;
  public int defaultEmptyDataValueSetting = MM_PROCESS_IF_EMPTY_DATA_VALUE;
  public int defaultEmptyRDFIDSetting = MM_PROCESS_IF_EMPTY_ID;
  public int defaultEmptyRDFSLabelSetting = MM_PROCESS_IF_EMPTY_LABEL;
  public int defaultIfExistsSetting = MM_RESOLVE_IF_EXISTS;
  public int defaultIfNotExistsSetting = MM_CREATE_IF_NOT_EXISTS;

  final public SimpleNode expression() throws ParseException {
                                       /*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MM_DEFAULT_VALUE_ENCODING:
      case MM_DEFAULT_ENTITY_TYPE:
      case MM_DEFAULT_PROPERTY_VALUE_TYPE:
      case MM_DEFAULT_SHIFT:
      case MM_DEFAULT_EMPTY_DATA_VALUE:
      case MM_DEFAULT_EMPTY_LOCATION:
      case MM_DEFAULT_EMPTY_RDF_ID:
      case MM_DEFAULT_EMPTY_RDFS_LABEL:
      case MM_DEFAULT_IF_EXISTS:
      case MM_DEFAULT_IF_NOT_EXISTS:
        mm_expression();
        break;
      case CLASS:
      case INDIVIDUAL:
      case NOT:
      case QUOTED_NAME_LITERAL:
      case IDENTIFIER:
      case 131:
      case 133:
      case 136:
        owl_expression();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void mm_expression() throws ParseException {
                                      /*@bgen(jjtree) MMExpression */
  ASTMMExpression jjtn000 = new ASTMMExpression(JJTMMEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MM_DEFAULT_VALUE_ENCODING:
        mm_default_value_encoding();
        break;
      case MM_DEFAULT_ENTITY_TYPE:
        mm_default_entity_type();
        break;
      case MM_DEFAULT_PROPERTY_VALUE_TYPE:
        mm_default_property_value_type();
        break;
      case MM_DEFAULT_SHIFT:
        mm_default_shift_setting();
        break;
      case MM_DEFAULT_EMPTY_LOCATION:
        mm_default_empty_location_setting();
        break;
      case MM_DEFAULT_EMPTY_DATA_VALUE:
        mm_default_empty_data_value_setting();
        break;
      case MM_DEFAULT_EMPTY_RDF_ID:
        mm_default_empty_rdf_id_setting();
        break;
      case MM_DEFAULT_EMPTY_RDFS_LABEL:
        mm_default_empty_rdfs_label_setting();
        break;
      case MM_DEFAULT_IF_EXISTS:
        mm_default_if_exists_setting();
        break;
      case MM_DEFAULT_IF_NOT_EXISTS:
        mm_default_if_not_exists_setting();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void owl_expression() throws ParseException {
                                        /*@bgen(jjtree) OWLExpression */
  ASTOWLExpression jjtn000 = new ASTOWLExpression(JJTOWLEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case QUOTED_NAME_LITERAL:
      case IDENTIFIER:
      case 131:
      case 133:
      case 136:
        owl_class_expression();
        break;
      case CLASS:
        owl_class_declaration();
        break;
      case INDIVIDUAL:
        owl_individual_declaration();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void mm_default_value_encoding() throws ParseException {
 /*@bgen(jjtree) MMDefaultValueEncoding */
  ASTMMDefaultValueEncoding jjtn000 = new ASTMMDefaultValueEncoding(JJTMMDEFAULTVALUEENCODING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int encodingType;
    try {
      jj_consume_token(MM_DEFAULT_VALUE_ENCODING);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RDF_ID:
        jj_consume_token(RDF_ID);
                    encodingType = RDF_ID;
        break;
      case RDFS_LABEL:
        jj_consume_token(RDFS_LABEL);
                        encodingType = RDFS_LABEL;
        break;
      case MM_DATA_VALUE:
        jj_consume_token(MM_DATA_VALUE);
                           encodingType = MM_DATA_VALUE;
        break;
      case MM_LOCATION:
        jj_consume_token(MM_LOCATION);
                         encodingType = MM_LOCATION;
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.encodingType = encodingType;
    defaultValueEncoding = encodingType;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void mm_default_shift_setting() throws ParseException {
 /*@bgen(jjtree) MMDefaultShiftSetting */
  ASTMMDefaultShiftSetting jjtn000 = new ASTMMDefaultShiftSetting(JJTMMDEFAULTSHIFTSETTING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int shiftSetting;
    try {
      jj_consume_token(MM_DEFAULT_SHIFT);
      shiftSetting = shift_setting();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.shiftSetting = shiftSetting;
    defaultShiftSetting = shiftSetting;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void mm_default_empty_location_setting() throws ParseException {
 /*@bgen(jjtree) MMDefaultEmptyLocationSetting */
  ASTMMDefaultEmptyLocationSetting jjtn000 = new ASTMMDefaultEmptyLocationSetting(JJTMMDEFAULTEMPTYLOCATIONSETTING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int emptyLocationSetting;
    try {
      jj_consume_token(MM_DEFAULT_EMPTY_LOCATION);
      emptyLocationSetting = empty_location_setting();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.emptyLocationSetting = emptyLocationSetting;
    defaultEmptyLocationSetting = emptyLocationSetting;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void mm_default_empty_data_value_setting() throws ParseException {
 /*@bgen(jjtree) MMDefaultEmptyDataValueSetting */
  ASTMMDefaultEmptyDataValueSetting jjtn000 = new ASTMMDefaultEmptyDataValueSetting(JJTMMDEFAULTEMPTYDATAVALUESETTING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int emptyDataValueSetting;
    try {
      jj_consume_token(MM_DEFAULT_EMPTY_DATA_VALUE);
      emptyDataValueSetting = empty_data_value_setting();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.emptyDataValueSetting = emptyDataValueSetting;
    defaultEmptyDataValueSetting = emptyDataValueSetting;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void mm_default_if_exists_setting() throws ParseException {
 /*@bgen(jjtree) MMDefaultIfExistsSetting */
  ASTMMDefaultIfExistsSetting jjtn000 = new ASTMMDefaultIfExistsSetting(JJTMMDEFAULTIFEXISTSSETTING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int ifExistsSetting;
    try {
      jj_consume_token(MM_DEFAULT_IF_EXISTS);
      ifExistsSetting = if_exists_directive();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.ifExistsSetting = ifExistsSetting;
    defaultIfExistsSetting = ifExistsSetting;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void mm_default_if_not_exists_setting() throws ParseException {
 /*@bgen(jjtree) MMDefaultIfNotExistsSetting */
  ASTMMDefaultIfNotExistsSetting jjtn000 = new ASTMMDefaultIfNotExistsSetting(JJTMMDEFAULTIFNOTEXISTSSETTING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int ifNotExistsSetting;
    try {
      jj_consume_token(MM_DEFAULT_IF_NOT_EXISTS);
      ifNotExistsSetting = if_not_exists_directive();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.ifNotExistsSetting = ifNotExistsSetting;
    defaultIfNotExistsSetting = ifNotExistsSetting;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void mm_default_empty_rdf_id_setting() throws ParseException {
 /*@bgen(jjtree) MMDefaultEmptyRDFIDSetting */
  ASTMMDefaultEmptyRDFIDSetting jjtn000 = new ASTMMDefaultEmptyRDFIDSetting(JJTMMDEFAULTEMPTYRDFIDSETTING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int emptyRDFIDSetting;
    try {
      jj_consume_token(MM_DEFAULT_EMPTY_RDF_ID);
      emptyRDFIDSetting = empty_rdf_id_setting();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.emptyRDFIDSetting = emptyRDFIDSetting;
    defaultEmptyRDFIDSetting = emptyRDFIDSetting;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void mm_default_empty_rdfs_label_setting() throws ParseException {
 /*@bgen(jjtree) MMDefaultEmptyRDFSLabelSetting */
  ASTMMDefaultEmptyRDFSLabelSetting jjtn000 = new ASTMMDefaultEmptyRDFSLabelSetting(JJTMMDEFAULTEMPTYRDFSLABELSETTING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int emptyRDFSLabelSetting;
    try {
      jj_consume_token(MM_DEFAULT_EMPTY_RDFS_LABEL);
      emptyRDFSLabelSetting = empty_rdfs_label_setting();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.emptyRDFSLabelSetting = emptyRDFSLabelSetting;
    defaultEmptyRDFSLabelSetting = emptyRDFSLabelSetting;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void mm_default_entity_type() throws ParseException {
 /*@bgen(jjtree) MMDefaultEntityType */
  ASTMMDefaultEntityType jjtn000 = new ASTMMDefaultEntityType(JJTMMDEFAULTENTITYTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int entityType;
    try {
      jj_consume_token(MM_DEFAULT_ENTITY_TYPE);
      entityType = entity_type();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    defaultEntityType = entityType;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void mm_default_language() throws ParseException {
 /*@bgen(jjtree) MMDefaultLanguage */
  ASTMMDefaultLanguage jjtn000 = new ASTMMDefaultLanguage(JJTMMDEFAULTLANGUAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String language;
    try {
      jj_consume_token(MM_DEFAULT_LANGUAGE);
      language = identifier();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    defaultLanguage = language;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void mm_default_prefix() throws ParseException {
 /*@bgen(jjtree) MMDefaultPrefix */
  ASTMMDefaultPrefix jjtn000 = new ASTMMDefaultPrefix(JJTMMDEFAULTPREFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String prefix;
    try {
      jj_consume_token(MM_DEFAULT_LANGUAGE);
      prefix = string();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    defaultPrefix = prefix;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void mm_default_namespace() throws ParseException {
 /*@bgen(jjtree) MMDefaultNamespace */
  ASTMMDefaultNamespace jjtn000 = new ASTMMDefaultNamespace(JJTMMDEFAULTNAMESPACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String namespace;
    try {
      jj_consume_token(MM_DEFAULT_NAMESPACE);
      namespace = string();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    defaultNamespace = namespace;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void mm_default_property_value_type() throws ParseException {
 /*@bgen(jjtree) MMDefaultPropertyValueType */
  ASTMMDefaultPropertyValueType jjtn000 = new ASTMMDefaultPropertyValueType(JJTMMDEFAULTPROPERTYVALUETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int defaultType;
    try {
      jj_consume_token(MM_DEFAULT_PROPERTY_VALUE_TYPE);
      defaultType = entity_type();
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.defaultType = defaultType;
   defaultPropertyValueType = defaultType;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void mm_default_datatype_property_value_type() throws ParseException {
 /*@bgen(jjtree) MMDefaultDatatypePropertyValueType */
  ASTMMDefaultDatatypePropertyValueType jjtn000 = new ASTMMDefaultDatatypePropertyValueType(JJTMMDEFAULTDATATYPEPROPERTYVALUETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int defaultType;
    try {
      jj_consume_token(MM_DEFAULT_DATA_PROPERTY_VALUE_TYPE);
      defaultType = datatype();
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.defaultType = defaultType;
   defaultDataPropertyValueType = defaultType;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void mm_default_annotation_property_value_type() throws ParseException {
 /*@bgen(jjtree) MMDefaultAnnotationPropertyValueType */
  ASTMMDefaultAnnotationPropertyValueType jjtn000 = new ASTMMDefaultAnnotationPropertyValueType(JJTMMDEFAULTANNOTATIONPROPERTYVALUETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int defaultEntityType;
    try {
      jj_consume_token(MM_DEFAULT_ANNOTATION_PROPERTY_VALUE_TYPE);
      defaultEntityType = entity_type();
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.defaultType = defaultEntityType;
   defaultAnnotationPropertyValueType = defaultEntityType;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void mm_default_property_type() throws ParseException {
 /*@bgen(jjtree) MMDefaultPropertyType */
  ASTMMDefaultPropertyType jjtn000 = new ASTMMDefaultPropertyType(JJTMMDEFAULTPROPERTYTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(MM_DEFAULT_PROPERTY_TYPE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OWL_DATA_PROPERTY:
        t = jj_consume_token(OWL_DATA_PROPERTY);
        break;
      case OWL_OBJECT_PROPERTY:
        t = jj_consume_token(OWL_OBJECT_PROPERTY);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.defaultType = t.kind;;
   defaultPropertyType = t.kind;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void owl_class_declaration() throws ParseException {
                                                     /*@bgen(jjtree) OWLClassDeclaration */
  ASTOWLClassDeclaration jjtn000 = new ASTOWLClassDeclaration(JJTOWLCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLASS);
      owl_named_class(defaultClassValueEncoding);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUIVALENT_TO:
        case SUBCLASS_OF:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUIVALENT_TO:
          owl_equivalent_to();
          break;
        case SUBCLASS_OF:
          owl_subclass_of();
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANNOTATIONS:
        jj_consume_token(ANNOTATIONS);
        annotation_fact_list();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void owl_equivalent_to() throws ParseException {
                                             /*@bgen(jjtree) OWLEquivalentTo */
  ASTOWLEquivalentTo jjtn000 = new ASTOWLEquivalentTo(JJTOWLEQUIVALENTTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EQUIVALENT_TO);
      owl_class_expression();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 130:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_2;
        }
        jj_consume_token(130);
        owl_class_expression();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void owl_subclass_of() throws ParseException {
                                         /*@bgen(jjtree) OWLSubclassOf */
  ASTOWLSubclassOf jjtn000 = new ASTOWLSubclassOf(JJTOWLSUBCLASSOF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SUBCLASS_OF);
      owl_class_expression();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 130:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_3;
        }
        jj_consume_token(130);
        owl_class_expression();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void owl_individual_declaration() throws ParseException {
                                                               /*@bgen(jjtree) OWLIndividualDeclaration */
  ASTOWLIndividualDeclaration jjtn000 = new ASTOWLIndividualDeclaration(JJTOWLINDIVIDUALDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INDIVIDUAL);
      owl_individual(defaultIndividualValueEncoding);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FACTS:
        jj_consume_token(FACTS);
        fact_list();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPES:
        jj_consume_token(TYPES);
        types(OWL_CLASS);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANNOTATIONS:
        jj_consume_token(ANNOTATIONS);
        annotation_fact_list();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SAME_AS:
        same_as();
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIFFERENT_FROM:
        different_from();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void same_as() throws ParseException {
                          /*@bgen(jjtree) SameAs */
  ASTSameAs jjtn000 = new ASTSameAs(JJTSAMEAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SAME_AS);
      owl_individual(defaultValueEncoding);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 130:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_4;
        }
        jj_consume_token(130);
        owl_individual(defaultValueEncoding);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void different_from() throws ParseException {
                                        /*@bgen(jjtree) DifferentFrom */
  ASTDifferentFrom jjtn000 = new ASTDifferentFrom(JJTDIFFERENTFROM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DIFFERENT_FROM);
      owl_individual(defaultValueEncoding);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 130:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_5;
        }
        jj_consume_token(130);
        owl_individual(defaultValueEncoding);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void fact_list() throws ParseException {
    fact();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 130:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_6;
      }
      jj_consume_token(130);
      fact();
    }
  }

  final public void annotation_fact_list() throws ParseException {
    annotation_fact();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 130:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_7;
      }
      jj_consume_token(130);
      annotation_fact();
    }
  }

  final public void fact() throws ParseException {
                    /*@bgen(jjtree) Fact */
  ASTFact jjtn000 = new ASTFact(JJTFACT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      owl_property();
      owl_property_value(defaultPropertyValueType);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void annotation_fact() throws ParseException {
                                         /*@bgen(jjtree) AnnotationFact */
  ASTAnnotationFact jjtn000 = new ASTAnnotationFact(JJTANNOTATIONFACT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      owl_property();
      owl_property_value(defaultAnnotationPropertyValueType);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void owl_property() throws ParseException {
                                    /*@bgen(jjtree) OWLProperty */
  ASTOWLProperty jjtn000 = new ASTOWLProperty(JJTOWLPROPERTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUOTED_NAME_LITERAL:
      case IDENTIFIER:
        owl_property_name();
        break;
      case 136:
        reference(defaultPropertyType, defaultPropertyValueEncoding);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void owl_individual(int defaultValueEncoding) throws ParseException {
                                                                /*@bgen(jjtree) OWLIndividual */
  ASTOWLIndividual jjtn000 = new ASTOWLIndividual(JJTOWLINDIVIDUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUOTED_NAME_LITERAL:
      case IDENTIFIER:
        owl_individual_name();
        break;
      case 136:
        reference(OWL_THING, defaultValueEncoding);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void owl_class_name() throws ParseException {
    name();
  }

  final public void owl_property_name() throws ParseException {
    name();
  }

  final public void owl_individual_name() throws ParseException {
    name();
  }

  final public void name() throws ParseException {
 /*@bgen(jjtree) Name */
  ASTName jjtn000 = new ASTName(JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String name;
  boolean isQuotedName = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        name = identifier();
        break;
      case QUOTED_NAME_LITERAL:
        name = quoted_name();
                            isQuotedName = true;
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.name = name;
    jjtn000.isQuotedName = isQuotedName;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void owl_property_value(int defaultPropertyValueType) throws ParseException {
                                                                           /*@bgen(jjtree) OWLPropertyValue */
  ASTOWLPropertyValue jjtn000 = new ASTOWLPropertyValue(JJTOWLPROPERTYVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 136:
        reference(defaultPropertyValueType, defaultValueEncoding);
        break;
      case QUOTED_NAME_LITERAL:
      case IDENTIFIER:
        name();
        break;
      case TRUE:
      case FALSE:
      case STRING_LITERAL:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
        literal();
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void literal() throws ParseException {
                           /*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        integer_literal();
        break;
      case FLOAT_LITERAL:
        float_literal();
        break;
      case TRUE:
      case FALSE:
        boolean_literal();
        break;
      case STRING_LITERAL:
        string_literal();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void integer_literal() throws ParseException {
 /*@bgen(jjtree) IntegerLiteralNode */
  ASTIntegerLiteral jjtn000 = new ASTIntegerLiteral(JJTINTEGERLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INTEGER_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.value = Integer.valueOf(token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void float_literal() throws ParseException {
 /*@bgen(jjtree) FloatLiteral */
  ASTFloatLiteral jjtn000 = new ASTFloatLiteral(JJTFLOATLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FLOAT_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.value = Float.valueOf(token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public String string() throws ParseException {
  Token t;
    t = jj_consume_token(STRING_LITERAL);
    String s = t.image;
    {if (true) return s.substring(1, s.length() - 1);}
    throw new Error("Missing return statement in function");
  }

  final public void string_literal() throws ParseException {
 /*@bgen(jjtree) StringLiteral */
  ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String value;
    try {
      value = string();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.value = value;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void boolean_literal() throws ParseException {
 /*@bgen(jjtree) BooleanLiteral */
  ASTBooleanLiteral jjtn000 = new ASTBooleanLiteral(JJTBOOLEANLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);boolean value;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        jj_consume_token(TRUE);
             value = true;
        break;
      case FALSE:
        jj_consume_token(FALSE);
                                         value = false;
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.value = value;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void owl_class_expression() throws ParseException {
                                                   /*@bgen(jjtree) OWLClassExpression */
  ASTOWLClassExpression jjtn000 = new ASTOWLClassExpression(JJTOWLCLASSEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      owl_union_class();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void owl_union_class() throws ParseException {
                                         /*@bgen(jjtree) OWLUnionClass */
  ASTOWLUnionClass jjtn000 = new ASTOWLUnionClass(JJTOWLUNIONCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      owl_intersection_class();
      label_8:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_8;
        }
        jj_consume_token(OR);
        owl_intersection_class();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void owl_intersection_class() throws ParseException {
                                                       /*@bgen(jjtree) OWLIntersectionClass */
  ASTOWLIntersectionClass jjtn000 = new ASTOWLIntersectionClass(JJTOWLINTERSECTIONCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      owl_class_or_restriction();
      label_9:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_9;
        }
        jj_consume_token(AND);
        owl_class_or_restriction();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void owl_class_or_restriction() throws ParseException {
 /*@bgen(jjtree) OWLClassOrRestriction */
  ASTOWLClassOrRestriction jjtn000 = new ASTOWLClassOrRestriction(JJTOWLCLASSORRESTRICTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);boolean isNegated = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
            isNegated = true;
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      if (jj_2_3(2147483647)) {
        owl_restriction();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case QUOTED_NAME_LITERAL:
        case IDENTIFIER:
        case 136:
          owl_named_class(defaultClassValueEncoding);
          break;
        case 131:
          jj_consume_token(131);
          owl_union_class();
          jj_consume_token(132);
          break;
        case 133:
          owl_enumerated_class();
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.isNegated = isNegated;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void owl_enumerated_class() throws ParseException {
                                                   /*@bgen(jjtree) OWLEnumeratedClass */
  ASTOWLEnumeratedClass jjtn000 = new ASTOWLEnumeratedClass(JJTOWLENUMERATEDCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(133);
      label_10:
      while (true) {
        owl_individual(defaultIndividualValueEncoding);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case QUOTED_NAME_LITERAL:
        case IDENTIFIER:
        case 136:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_10;
        }
      }
      jj_consume_token(134);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void owl_named_class(int defaultValueEncoding) throws ParseException {
                                                                 /*@bgen(jjtree) OWLNamedClass */
  ASTOWLNamedClass jjtn000 = new ASTOWLNamedClass(JJTOWLNAMEDCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUOTED_NAME_LITERAL:
      case IDENTIFIER:
        owl_class_name();
        break;
      case 136:
        reference(OWL_CLASS, defaultValueEncoding);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public String identifier() throws ParseException {
  Token t;
    t = jj_consume_token(IDENTIFIER);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String location_specification() throws ParseException {
  Token t;
    t = jj_consume_token(LOCATION_SPECIFICATION);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public void source_specification() throws ParseException {
 /*@bgen(jjtree) SourceSpecification */
  ASTSourceSpecification jjtn000 = new ASTSourceSpecification(JJTSOURCESPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String source = null;
  String location = null;
  String literal = null;
  Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUOTED_NAME_LITERAL:
      case IDENTIFIER:
      case LOCATION_SPECIFICATION:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case QUOTED_NAME_LITERAL:
          source = quoted_name();
          jj_consume_token(135);
          break;
        default:
          jj_la1[29] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LOCATION_SPECIFICATION:
          location = location_specification();
          break;
        case IDENTIFIER:
          location = identifier();
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case STRING_LITERAL:
        literal = string();
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
     jjtn000.source = source;
     jjtn000.location = location;
     jjtn000.literal = literal;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void owl_restriction() throws ParseException {
                                          /*@bgen(jjtree) OWLRestriction */
  ASTOWLRestriction jjtn000 = new ASTOWLRestriction(JJTOWLRESTRICTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      owl_property();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAX:
        owl_max_cardinality();
        break;
      case MIN:
        owl_min_cardinality();
        break;
      case EXACTLY:
        owl_cardinality();
        break;
      case VALUE:
        owl_has_value();
        break;
      case ONLY:
        owl_all_values_from();
        break;
      case SOME:
        owl_some_values_from();
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public int integer_value() throws ParseException {
  Token t;
    t = jj_consume_token(INTEGER_LITERAL);
    {if (true) return Integer.parseInt(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public int cardinality_value() throws ParseException {
 int cardinality;
    cardinality = integer_value();
    {if (true) return cardinality;}
    throw new Error("Missing return statement in function");
  }

  final public void owl_max_cardinality() throws ParseException {
 /*@bgen(jjtree) OWLMaxCardinality */
  ASTOWLMaxCardinality jjtn000 = new ASTOWLMaxCardinality(JJTOWLMAXCARDINALITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int cardinality;
    try {
      jj_consume_token(MAX);
      cardinality = cardinality_value();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.cardinality = cardinality;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void owl_min_cardinality() throws ParseException {
 /*@bgen(jjtree) OWLMinCardinality */
  ASTOWLMinCardinality jjtn000 = new ASTOWLMinCardinality(JJTOWLMINCARDINALITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int cardinality;
    try {
      jj_consume_token(MIN);
      cardinality = cardinality_value();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.cardinality = cardinality;
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void owl_all_values_from() throws ParseException {
                                                /*@bgen(jjtree) OWLAllValuesFrom */
  ASTOWLAllValuesFrom jjtn000 = new ASTOWLAllValuesFrom(JJTOWLALLVALUESFROM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_4(2)) {
        owl_all_values_from_datatype();
      } else if (jj_2_5(2)) {
        owl_all_values_from_class();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void owl_has_value() throws ParseException {
                                     /*@bgen(jjtree) OWLHasValue */
  ASTOWLHasValue jjtn000 = new ASTOWLHasValue(JJTOWLHASVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VALUE);
      owl_property_value(defaultPropertyValueType);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void owl_cardinality() throws ParseException {
 /*@bgen(jjtree) OWLCardinality */
  ASTOWLCardinality jjtn000 = new ASTOWLCardinality(JJTOWLCARDINALITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int cardinality;
    try {
      jj_consume_token(EXACTLY);
      cardinality = cardinality_value();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.cardinality = cardinality;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void owl_all_values_from_class() throws ParseException {
                                                           /*@bgen(jjtree) OWLAllValuesFromClass */
  ASTOWLAllValuesFromClass jjtn000 = new ASTOWLAllValuesFromClass(JJTOWLALLVALUESFROMCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ONLY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUOTED_NAME_LITERAL:
      case IDENTIFIER:
      case 136:
        owl_named_class(defaultClassValueEncoding);
        break;
      case 131:
        jj_consume_token(131);
        owl_class_expression();
        jj_consume_token(132);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void owl_all_values_from_datatype() throws ParseException {
 /*@bgen(jjtree) OWLAllValuesFromDataType */
  ASTOWLAllValuesFromDataType jjtn000 = new ASTOWLAllValuesFromDataType(JJTOWLALLVALUESFROMDATATYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int dataType;
    try {
      jj_consume_token(ONLY);
      dataType = datatype();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.dataType = dataType;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void owl_some_values_from() throws ParseException {
                                                  /*@bgen(jjtree) OWLSomeValuesFrom */
  ASTOWLSomeValuesFrom jjtn000 = new ASTOWLSomeValuesFrom(JJTOWLSOMEVALUESFROM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_6(2)) {
        owl_some_values_from_datatype();
      } else if (jj_2_7(2)) {
        owl_some_values_from_class();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void owl_some_values_from_class() throws ParseException {
                                                             /*@bgen(jjtree) OWLSomeValuesFromClass */
  ASTOWLSomeValuesFromClass jjtn000 = new ASTOWLSomeValuesFromClass(JJTOWLSOMEVALUESFROMCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SOME);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUOTED_NAME_LITERAL:
      case IDENTIFIER:
      case 136:
        owl_named_class(defaultClassValueEncoding);
        break;
      case 131:
        jj_consume_token(131);
        owl_class_expression();
        jj_consume_token(132);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void owl_some_values_from_datatype() throws ParseException {
 /*@bgen(jjtree) OWLSomeValuesFromDataType */
  ASTOWLSomeValuesFromDataType jjtn000 = new ASTOWLSomeValuesFromDataType(JJTOWLSOMEVALUESFROMDATATYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int dataType;
    try {
      jj_consume_token(SOME);
      dataType = datatype();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.dataType = dataType;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public int datatype() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case XSD_INT:
      t = jj_consume_token(XSD_INT);
      break;
    case XSD_STRING:
      t = jj_consume_token(XSD_STRING);
      break;
    case XSD_FLOAT:
      t = jj_consume_token(XSD_FLOAT);
      break;
    case XSD_DOUBLE:
      t = jj_consume_token(XSD_DOUBLE);
      break;
    case XSD_SHORT:
      t = jj_consume_token(XSD_SHORT);
      break;
    case XSD_BOOLEAN:
      t = jj_consume_token(XSD_BOOLEAN);
      break;
    case XSD_TIME:
      t = jj_consume_token(XSD_TIME);
      break;
    case XSD_DATETIME:
      t = jj_consume_token(XSD_DATETIME);
      break;
    case XSD_DURATION:
      t = jj_consume_token(XSD_DURATION);
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.kind;}
    throw new Error("Missing return statement in function");
  }

  final public void reference(int defaultEntityType, int defaultValueEncoding) throws ParseException {
                                                                              /*@bgen(jjtree) Reference */
  ASTReference jjtn000 = new ASTReference(JJTREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(136);
      source_specification();
      if (jj_2_8(2)) {
        jj_consume_token(131);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case XSD_DATETIME:
        case XSD_STRING:
        case XSD_INT:
        case XSD_SHORT:
        case XSD_BOOLEAN:
        case XSD_DOUBLE:
        case XSD_FLOAT:
        case XSD_TIME:
        case XSD_DURATION:
        case RDFS_CLASS:
        case RDF_PROPERTY:
        case OWL_CLASS:
        case OWL_THING:
        case OWL_OBJECT_PROPERTY:
        case OWL_DATA_PROPERTY:
          entity_type();
          break;
        default:
          jj_la1[36] = jj_gen;
          ;
        }
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MM_LOCATION_WITH_DUPLICATES:
          case MM_LOCATION:
          case RDF_ID:
          case RDFS_LABEL:
          case XML_LANG:
          case MM_DATA_VALUE:
          case MM_PREFIX:
          case MM_NAMESPACE:
          case MM_TO_UPPER_CASE:
          case MM_TO_LOWER_CASE:
          case MM_TRIM:
          case MM_CAPTURING:
          case MM_REVERSE:
          case MM_REPLACE:
          case MM_REPLACE_ALL:
          case MM_REPLACE_FIRST:
          case MM_APPEND:
          case MM_PREPEND:
          case MM_DEFAULT_LOCATION_VALUE:
          case MM_DEFAULT_DATA_VALUE:
          case MM_DEFAULT_ID:
          case MM_DEFAULT_LABEL:
          case MM_NO_SHIFT:
          case MM_SHIFT_UP:
          case MM_SHIFT_DOWN:
          case MM_SHIFT_LEFT:
          case MM_SHIFT_RIGHT:
          case MM_ERROR_IF_EMPTY_LOCATION:
          case MM_WARNING_IF_EMPTY_LOCATION:
          case MM_SKIP_IF_EMPTY_LOCATION:
          case MM_PROCESS_IF_EMPTY_LOCATION:
          case MM_PROCESS_IF_EMPTY_DATA_VALUE:
          case MM_ERROR_IF_EMPTY_DATA_VALUE:
          case MM_WARNING_IF_EMPTY_DATA_VALUE:
          case MM_SKIP_IF_EMPTY_DATA_VALUE:
          case MM_PROCESS_IF_EMPTY_ID:
          case MM_ERROR_IF_EMPTY_ID:
          case MM_WARNING_IF_EMPTY_ID:
          case MM_SKIP_IF_EMPTY_ID:
          case MM_PROCESS_IF_EMPTY_LABEL:
          case MM_ERROR_IF_EMPTY_LABEL:
          case MM_WARNING_IF_EMPTY_LABEL:
          case MM_SKIP_IF_EMPTY_LABEL:
          case MM_RESOLVE_IF_EXISTS:
          case MM_SKIP_IF_EXISTS:
          case MM_WARNING_IF_EXISTS:
          case MM_ERROR_IF_EXISTS:
          case MM_CREATE_IF_NOT_EXISTS:
          case MM_SKIP_IF_NOT_EXISTS:
          case MM_WARNING_IF_NOT_EXISTS:
          case MM_ERROR_IF_NOT_EXISTS:
          case 138:
            ;
            break;
          default:
            jj_la1[37] = jj_gen;
            break label_11;
          }
          directive(defaultValueEncoding);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
        case QUOTED_NAME_LITERAL:
        case IDENTIFIER:
        case 131:
        case 133:
        case 136:
          types(defaultEntityType);
          break;
        default:
          jj_la1[38] = jj_gen;
          ;
        }
        jj_consume_token(132);
      } else {
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.defaultReferenceDirectives = new DefaultReferenceDirectives(defaultEntityType, defaultValueEncoding,
                        defaultLocationValue, defaultDataValue, defaultID,
                        defaultLabel, defaultLanguage, defaultPrefix, defaultNamespace,
                        defaultShiftSetting,
                        defaultEmptyLocationSetting, defaultEmptyDataValueSetting, defaultEmptyRDFIDSetting,
                        defaultEmptyRDFSLabelSetting,
                        defaultIfExistsSetting, defaultIfNotExistsSetting);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void directive(int defaultValueEncoding) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MM_NAMESPACE:
      namespace();
      break;
    case MM_PREFIX:
      prefix();
      break;
    case XML_LANG:
      language();
      break;
    case MM_TO_UPPER_CASE:
    case MM_TO_LOWER_CASE:
    case MM_TRIM:
    case MM_CAPTURING:
    case MM_REVERSE:
    case MM_REPLACE:
    case MM_REPLACE_ALL:
    case MM_REPLACE_FIRST:
    case MM_APPEND:
    case MM_PREPEND:
    case 138:
      value_extraction_function();
      break;
    case MM_LOCATION_WITH_DUPLICATES:
    case MM_LOCATION:
    case RDF_ID:
    case RDFS_LABEL:
    case MM_DATA_VALUE:
      value_encoding(defaultValueEncoding);
      break;
    case MM_DEFAULT_LOCATION_VALUE:
      default_location_value();
      break;
    case MM_DEFAULT_DATA_VALUE:
      default_data_value();
      break;
    case MM_DEFAULT_LABEL:
      default_label();
      break;
    case MM_DEFAULT_ID:
      default_id();
      break;
    case MM_PROCESS_IF_EMPTY_DATA_VALUE:
    case MM_ERROR_IF_EMPTY_DATA_VALUE:
    case MM_WARNING_IF_EMPTY_DATA_VALUE:
    case MM_SKIP_IF_EMPTY_DATA_VALUE:
      empty_data_value_setting();
      break;
    case MM_ERROR_IF_EMPTY_LOCATION:
    case MM_WARNING_IF_EMPTY_LOCATION:
    case MM_SKIP_IF_EMPTY_LOCATION:
    case MM_PROCESS_IF_EMPTY_LOCATION:
      empty_location_setting();
      break;
    case MM_PROCESS_IF_EMPTY_ID:
    case MM_ERROR_IF_EMPTY_ID:
    case MM_WARNING_IF_EMPTY_ID:
    case MM_SKIP_IF_EMPTY_ID:
      empty_rdf_id_setting();
      break;
    case MM_PROCESS_IF_EMPTY_LABEL:
    case MM_ERROR_IF_EMPTY_LABEL:
    case MM_WARNING_IF_EMPTY_LABEL:
    case MM_SKIP_IF_EMPTY_LABEL:
      empty_rdfs_label_setting();
      break;
    case MM_NO_SHIFT:
    case MM_SHIFT_UP:
    case MM_SHIFT_DOWN:
    case MM_SHIFT_LEFT:
    case MM_SHIFT_RIGHT:
      shift_setting();
      break;
    case MM_RESOLVE_IF_EXISTS:
    case MM_SKIP_IF_EXISTS:
    case MM_WARNING_IF_EXISTS:
    case MM_ERROR_IF_EXISTS:
      if_exists_directive();
      break;
    case MM_CREATE_IF_NOT_EXISTS:
    case MM_SKIP_IF_NOT_EXISTS:
    case MM_WARNING_IF_NOT_EXISTS:
    case MM_ERROR_IF_NOT_EXISTS:
      if_not_exists_directive();
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public int entity_type() throws ParseException {
 /*@bgen(jjtree) OWLEntityType */
  ASTEntityType jjtn000 = new ASTEntityType(JJTENTITYTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  int entityType = defaultEntityType;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RDFS_CLASS:
        t = jj_consume_token(RDFS_CLASS);
                        entityType = t.kind;
        break;
      case RDF_PROPERTY:
        t = jj_consume_token(RDF_PROPERTY);
                          entityType = t.kind;
        break;
      case OWL_CLASS:
        t = jj_consume_token(OWL_CLASS);
                       entityType = t.kind;
        break;
      case OWL_THING:
        t = jj_consume_token(OWL_THING);
                       entityType = t.kind;
        break;
      case OWL_OBJECT_PROPERTY:
        t = jj_consume_token(OWL_OBJECT_PROPERTY);
                                 entityType = t.kind;
        break;
      case OWL_DATA_PROPERTY:
        t = jj_consume_token(OWL_DATA_PROPERTY);
                               entityType = t.kind;
        break;
      case XSD_DATETIME:
      case XSD_STRING:
      case XSD_INT:
      case XSD_SHORT:
      case XSD_BOOLEAN:
      case XSD_DOUBLE:
      case XSD_FLOAT:
      case XSD_TIME:
      case XSD_DURATION:
        entityType = datatype();
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.entityType = entityType;
    {if (true) return entityType;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public int value_encoding(int defaultValueEncoding) throws ParseException {
 /*@bgen(jjtree) ValueEncoding */
  ASTValueEncoding jjtn000 = new ASTValueEncoding(JJTVALUEENCODING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int encodingType = defaultValueEncoding;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MM_LOCATION:
        jj_consume_token(MM_LOCATION);
                      encodingType = MM_LOCATION;
        break;
      case MM_LOCATION_WITH_DUPLICATES:
        jj_consume_token(MM_LOCATION_WITH_DUPLICATES);
                                      encodingType = MM_LOCATION_WITH_DUPLICATES;
        break;
      case RDF_ID:
      case RDFS_LABEL:
      case MM_DATA_VALUE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RDF_ID:
          jj_consume_token(RDF_ID);
                    encodingType = RDF_ID;
          break;
        case RDFS_LABEL:
          jj_consume_token(RDFS_LABEL);
                        encodingType = RDFS_LABEL;
          break;
        case MM_DATA_VALUE:
          jj_consume_token(MM_DATA_VALUE);
                           encodingType = MM_DATA_VALUE;
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 137:
          value_specification();
          break;
        default:
          jj_la1[42] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.encodingType = encodingType;
    {if (true) return encodingType;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public int empty_location_setting() throws ParseException {
 /*@bgen(jjtree) EmptyLocationSetting */
  ASTEmptyLocationSetting jjtn000 = new ASTEmptyLocationSetting(JJTEMPTYLOCATIONSETTING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  int emptyLocationSetting;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MM_ERROR_IF_EMPTY_LOCATION:
        t = jj_consume_token(MM_ERROR_IF_EMPTY_LOCATION);
                                        emptyLocationSetting = t.kind;
        break;
      case MM_WARNING_IF_EMPTY_LOCATION:
        t = jj_consume_token(MM_WARNING_IF_EMPTY_LOCATION);
                                          emptyLocationSetting = t.kind;
        break;
      case MM_SKIP_IF_EMPTY_LOCATION:
        t = jj_consume_token(MM_SKIP_IF_EMPTY_LOCATION);
                                       emptyLocationSetting = t.kind;
        break;
      case MM_PROCESS_IF_EMPTY_LOCATION:
        t = jj_consume_token(MM_PROCESS_IF_EMPTY_LOCATION);
                                          emptyLocationSetting = t.kind;
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.emptyLocationSetting = emptyLocationSetting;
    {if (true) return emptyLocationSetting;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public int if_exists_directive() throws ParseException {
 /*@bgen(jjtree) IfExistsDirective */
  ASTIfExistsDirective jjtn000 = new ASTIfExistsDirective(JJTIFEXISTSDIRECTIVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  int ifExistsSetting;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MM_RESOLVE_IF_EXISTS:
        t = jj_consume_token(MM_RESOLVE_IF_EXISTS);
                                  ifExistsSetting = t.kind;
        break;
      case MM_SKIP_IF_EXISTS:
        t = jj_consume_token(MM_SKIP_IF_EXISTS);
                               ifExistsSetting = t.kind;
        break;
      case MM_WARNING_IF_EXISTS:
        t = jj_consume_token(MM_WARNING_IF_EXISTS);
                                  ifExistsSetting = t.kind;
        break;
      case MM_ERROR_IF_EXISTS:
        t = jj_consume_token(MM_ERROR_IF_EXISTS);
                                ifExistsSetting = t.kind;
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.ifExistsSetting = ifExistsSetting;
    {if (true) return ifExistsSetting;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public int if_not_exists_directive() throws ParseException {
 /*@bgen(jjtree) IfNotExistsDirective */
  ASTIfNotExistsDirective jjtn000 = new ASTIfNotExistsDirective(JJTIFNOTEXISTSDIRECTIVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  int ifNotExistsSetting;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MM_CREATE_IF_NOT_EXISTS:
        t = jj_consume_token(MM_CREATE_IF_NOT_EXISTS);
                                     ifNotExistsSetting = t.kind;
        break;
      case MM_SKIP_IF_NOT_EXISTS:
        t = jj_consume_token(MM_SKIP_IF_NOT_EXISTS);
                                   ifNotExistsSetting = t.kind;
        break;
      case MM_WARNING_IF_NOT_EXISTS:
        t = jj_consume_token(MM_WARNING_IF_NOT_EXISTS);
                                      ifNotExistsSetting = t.kind;
        break;
      case MM_ERROR_IF_NOT_EXISTS:
        t = jj_consume_token(MM_ERROR_IF_NOT_EXISTS);
                                    ifNotExistsSetting = t.kind;
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.ifNotExistsSetting = ifNotExistsSetting;
    {if (true) return ifNotExistsSetting;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public int empty_data_value_setting() throws ParseException {
 /*@bgen(jjtree) EmptyDataValueSetting */
  ASTEmptyDataValueSetting jjtn000 = new ASTEmptyDataValueSetting(JJTEMPTYDATAVALUESETTING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  int emptyDataValueSetting;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MM_ERROR_IF_EMPTY_DATA_VALUE:
        t = jj_consume_token(MM_ERROR_IF_EMPTY_DATA_VALUE);
                                          emptyDataValueSetting = t.kind;
        break;
      case MM_WARNING_IF_EMPTY_DATA_VALUE:
        t = jj_consume_token(MM_WARNING_IF_EMPTY_DATA_VALUE);
                                            emptyDataValueSetting = t.kind;
        break;
      case MM_SKIP_IF_EMPTY_DATA_VALUE:
        t = jj_consume_token(MM_SKIP_IF_EMPTY_DATA_VALUE);
                                         emptyDataValueSetting = t.kind;
        break;
      case MM_PROCESS_IF_EMPTY_DATA_VALUE:
        t = jj_consume_token(MM_PROCESS_IF_EMPTY_DATA_VALUE);
                                            emptyDataValueSetting = t.kind;
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.emptyDataValueSetting = emptyDataValueSetting;
    {if (true) return emptyDataValueSetting;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public int empty_rdfs_label_setting() throws ParseException {
 /*@bgen(jjtree) EmptyRDFSLabelSetting */
  ASTEmptyRDFSLabelSetting jjtn000 = new ASTEmptyRDFSLabelSetting(JJTEMPTYRDFSLABELSETTING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  int emptyRDFSLabelSetting;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MM_ERROR_IF_EMPTY_LABEL:
        t = jj_consume_token(MM_ERROR_IF_EMPTY_LABEL);
                                     emptyRDFSLabelSetting = t.kind;
        break;
      case MM_WARNING_IF_EMPTY_LABEL:
        t = jj_consume_token(MM_WARNING_IF_EMPTY_LABEL);
                                       emptyRDFSLabelSetting = t.kind;
        break;
      case MM_SKIP_IF_EMPTY_LABEL:
        t = jj_consume_token(MM_SKIP_IF_EMPTY_LABEL);
                                    emptyRDFSLabelSetting = t.kind;
        break;
      case MM_PROCESS_IF_EMPTY_LABEL:
        t = jj_consume_token(MM_PROCESS_IF_EMPTY_LABEL);
                                       emptyRDFSLabelSetting = t.kind;
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.emptyRDFSLabelSetting = emptyRDFSLabelSetting;
    {if (true) return emptyRDFSLabelSetting;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public int empty_rdf_id_setting() throws ParseException {
 /*@bgen(jjtree) EmptyRDFIDSetting */
  ASTEmptyRDFIDSetting jjtn000 = new ASTEmptyRDFIDSetting(JJTEMPTYRDFIDSETTING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  int emptyRDFIDSetting;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MM_ERROR_IF_EMPTY_ID:
        t = jj_consume_token(MM_ERROR_IF_EMPTY_ID);
                                  emptyRDFIDSetting = t.kind;
        break;
      case MM_WARNING_IF_EMPTY_ID:
        t = jj_consume_token(MM_WARNING_IF_EMPTY_ID);
                                    emptyRDFIDSetting = t.kind;
        break;
      case MM_SKIP_IF_EMPTY_ID:
        t = jj_consume_token(MM_SKIP_IF_EMPTY_ID);
                                 emptyRDFIDSetting = t.kind;
        break;
      case MM_PROCESS_IF_EMPTY_ID:
        t = jj_consume_token(MM_PROCESS_IF_EMPTY_ID);
                                    emptyRDFIDSetting = t.kind;
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.emptyRDFIDSetting = emptyRDFIDSetting;
    {if (true) return emptyRDFIDSetting;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public int shift_setting() throws ParseException {
 /*@bgen(jjtree) ShiftSetting */
  ASTShiftSetting jjtn000 = new ASTShiftSetting(JJTSHIFTSETTING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  int shiftSetting;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MM_SHIFT_UP:
        t = jj_consume_token(MM_SHIFT_UP);
                         shiftSetting = t.kind;
        break;
      case MM_SHIFT_DOWN:
        t = jj_consume_token(MM_SHIFT_DOWN);
                           shiftSetting = t.kind;
        break;
      case MM_SHIFT_LEFT:
        t = jj_consume_token(MM_SHIFT_LEFT);
                           shiftSetting = t.kind;
        break;
      case MM_SHIFT_RIGHT:
        t = jj_consume_token(MM_SHIFT_RIGHT);
                            shiftSetting = t.kind;
        break;
      case MM_NO_SHIFT:
        t = jj_consume_token(MM_NO_SHIFT);
                         shiftSetting = t.kind;
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.shiftSetting = shiftSetting;
    {if (true) return shiftSetting;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void default_data_value() throws ParseException {
 /*@bgen(jjtree) DefaultDataValue */
  ASTDefaultDataValue jjtn000 = new ASTDefaultDataValue(JJTDEFAULTDATAVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String defaultDataValue;
    try {
      jj_consume_token(MM_DEFAULT_DATA_VALUE);
      jj_consume_token(137);
      defaultDataValue = string();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.defaultDataValue = defaultDataValue;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void default_location_value() throws ParseException {
 /*@bgen(jjtree) DefaultLocationValue */
  ASTDefaultLocationValue jjtn000 = new ASTDefaultLocationValue(JJTDEFAULTLOCATIONVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String defaultLocationValue;
    try {
      jj_consume_token(MM_DEFAULT_LOCATION_VALUE);
      jj_consume_token(137);
      defaultLocationValue = string();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.defaultLocationValue = defaultLocationValue;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void default_id() throws ParseException {
 /*@bgen(jjtree) DefaultID */
  ASTDefaultID jjtn000 = new ASTDefaultID(JJTDEFAULTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String defaulrRDFID;
    try {
      jj_consume_token(MM_DEFAULT_ID);
      jj_consume_token(137);
      defaulrRDFID = string();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.defaultID = defaulrRDFID;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void default_label() throws ParseException {
 /*@bgen(jjtree) DefaultLabel */
  ASTDefaultLabel jjtn000 = new ASTDefaultLabel(JJTDEFAULTLABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String defaultLabel;
    try {
      jj_consume_token(MM_DEFAULT_LABEL);
      jj_consume_token(137);
      defaultLabel = string();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.defaultLabel = defaultLabel;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void prefix() throws ParseException {
 /*@bgen(jjtree) Prefix */
  ASTPrefix jjtn000 = new ASTPrefix(JJTPREFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String prefix;
    try {
      jj_consume_token(MM_PREFIX);
      jj_consume_token(137);
      prefix = string();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.prefix = prefix;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void language() throws ParseException {
 /*@bgen(jjtree) Language */
  ASTLanguage jjtn000 = new ASTLanguage(JJTLANGUAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String language;
    try {
      jj_consume_token(XML_LANG);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 137:
        jj_consume_token(137);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MM_NULL:
          jj_consume_token(MM_NULL);
                                   language = "";
          break;
        case CELL_WILDCARD:
          jj_consume_token(CELL_WILDCARD);
                             language = "*";
          break;
        case STRING_LITERAL:
          language = string();
          break;
        default:
          jj_la1[51] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case 135:
        jj_consume_token(135);
        jj_consume_token(137);
        jj_consume_token(MM_NULL);
                                      language = "+";
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.language = language;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void namespace() throws ParseException {
 /*@bgen(jjtree) Namespace */
  ASTNamespace jjtn000 = new ASTNamespace(JJTNAMESPACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String namespace;
    try {
      jj_consume_token(MM_NAMESPACE);
      jj_consume_token(137);
      namespace = string();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.namespace = namespace;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void value_specification() throws ParseException {
 /*@bgen(jjtree) ValueSpecification */
  ASTValueSpecification jjtn000 = new ASTValueSpecification(JJTVALUESPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(137);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MM_TO_UPPER_CASE:
      case MM_TO_LOWER_CASE:
      case MM_TRIM:
      case MM_CAPTURING:
      case MM_REVERSE:
      case MM_REPLACE:
      case MM_REPLACE_ALL:
      case MM_REPLACE_FIRST:
      case MM_APPEND:
      case MM_PREPEND:
      case STRING_LITERAL:
      case 136:
      case 138:
        value_specification_item();
        break;
      case 131:
        jj_consume_token(131);
        value_specification_item();
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 130:
            ;
            break;
          default:
            jj_la1[53] = jj_gen;
            break label_12;
          }
          jj_consume_token(130);
          value_specification_item();
        }
        jj_consume_token(132);
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void value_specification_item() throws ParseException {
 /*@bgen(jjtree) ValueSpecificationItem */
  ASTValueSpecificationItem jjtn000 = new ASTValueSpecificationItem(JJTVALUESPECIFICATIONITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String stringLiteral = null;
  String captureExpression = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
        stringLiteral = string();
        break;
      case 136:
        reference(XSD_STRING, defaultValueEncoding);
        break;
      case MM_TO_UPPER_CASE:
      case MM_TO_LOWER_CASE:
      case MM_TRIM:
      case MM_CAPTURING:
      case MM_REVERSE:
      case MM_REPLACE:
      case MM_REPLACE_ALL:
      case MM_REPLACE_FIRST:
      case MM_APPEND:
      case MM_PREPEND:
      case 138:
        value_extraction_function();
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.stringLiteral = stringLiteral;
    jjtn000.captureExpression = captureExpression;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void value_extraction_function() throws ParseException {
 /*@bgen(jjtree) ValueExtractionFunction */
  ASTValueExtractionFunction jjtn000 = new ASTValueExtractionFunction(JJTVALUEEXTRACTIONFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  int functionID;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MM_TO_UPPER_CASE:
      case MM_TO_LOWER_CASE:
      case MM_TRIM:
      case MM_CAPTURING:
      case MM_REVERSE:
      case MM_REPLACE:
      case MM_REPLACE_ALL:
      case MM_REPLACE_FIRST:
      case MM_APPEND:
      case MM_PREPEND:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MM_TO_UPPER_CASE:
          t = jj_consume_token(MM_TO_UPPER_CASE);
                                functionID = t.kind;
          break;
        case MM_TO_LOWER_CASE:
          t = jj_consume_token(MM_TO_LOWER_CASE);
                                functionID = t.kind;
          break;
        case MM_TRIM:
          t = jj_consume_token(MM_TRIM);
                       functionID = t.kind;
          break;
        case MM_REVERSE:
          t = jj_consume_token(MM_REVERSE);
                          functionID = t.kind;
          break;
        case MM_CAPTURING:
          t = jj_consume_token(MM_CAPTURING);
                            functionID = t.kind;
          break;
        case MM_REPLACE:
          t = jj_consume_token(MM_REPLACE);
                          functionID = t.kind;
          break;
        case MM_REPLACE_ALL:
          t = jj_consume_token(MM_REPLACE_ALL);
                              functionID = t.kind;
          break;
        case MM_REPLACE_FIRST:
          t = jj_consume_token(MM_REPLACE_FIRST);
                                functionID = t.kind;
          break;
        case MM_APPEND:
          t = jj_consume_token(MM_APPEND);
                         functionID = t.kind;
          break;
        case MM_PREPEND:
          t = jj_consume_token(MM_PREPEND);
                          functionID = t.kind;
          break;
        default:
          jj_la1[56] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (jj_2_9(2)) {
          jj_consume_token(131);
          string_or_reference();
          label_13:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 130:
              ;
              break;
            default:
              jj_la1[57] = jj_gen;
              break label_13;
            }
            jj_consume_token(130);
            string_or_reference();
          }
          jj_consume_token(132);
        } else {
          ;
        }
        break;
      case 138:
        jj_consume_token(138);
        if (jj_2_10(2)) {
          string_or_reference();
          label_14:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 130:
              ;
              break;
            default:
              jj_la1[58] = jj_gen;
              break label_14;
            }
            jj_consume_token(130);
            string_or_reference();
          }
        } else {
          ;
        }
        jj_consume_token(139);
                                                                                         functionID = MM_CAPTURING;
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.functionID = functionID;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void string_or_reference() throws ParseException {
                                                 /*@bgen(jjtree) StringOrReference */
  ASTStringOrReference jjtn000 = new ASTStringOrReference(JJTSTRINGORREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 136:
        reference(XSD_STRING, defaultValueEncoding);
        break;
      case STRING_LITERAL:
        string_literal();
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void types(int entityType) throws ParseException {
 /*@bgen(jjtree) Types */
  ASTTypes jjtn000 = new ASTTypes(JJTTYPES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int defaultType = ParserUtil.getDefaultType(entityType);
    try {
      if (jj_2_11(2)) {
        owl_class_expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 136:
          reference(entityType, defaultValueEncoding);
          break;
        default:
          jj_la1[61] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 130:
        jj_consume_token(130);
        if (jj_2_12(2)) {
          owl_class_expression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 136:
            reference(entityType, defaultValueEncoding);
            break;
          default:
            jj_la1[62] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public List<String> strings() throws ParseException {
  List<String> strings = new ArrayList<String>();
  String s;
    s = string();
                 strings.add(s);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 130:
        ;
        break;
      default:
        jj_la1[64] = jj_gen;
        break label_15;
      }
      jj_consume_token(130);
      s = string();
                                                        strings.add(s);
    }
    {if (true) return strings;}
    throw new Error("Missing return statement in function");
  }

  final public String quoted_name() throws ParseException {
  Token t;
    t = jj_consume_token(QUOTED_NAME_LITERAL);
    String s = t.image;
    {if (true) return s.substring(1, s.length() - 1);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_3R_33() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(131)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(132)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_scan_token(LOCATION_SPECIFICATION)) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(MM_NO_SHIFT)) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(MM_SHIFT_RIGHT)) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(MM_SHIFT_LEFT)) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(MM_SHIFT_DOWN)) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(MM_SHIFT_UP)) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(133)) return true;
    Token xsp;
    if (jj_3R_179()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_179()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(134)) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(MM_PROCESS_IF_EMPTY_ID)) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(MM_SKIP_IF_EMPTY_ID)) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(MM_WARNING_IF_EMPTY_ID)) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(MM_ERROR_IF_EMPTY_ID)) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(MM_PROCESS_IF_EMPTY_LABEL)) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(MM_SKIP_IF_EMPTY_LABEL)) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(MM_WARNING_IF_EMPTY_LABEL)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_16()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_scan_token(MM_ERROR_IF_EMPTY_LABEL)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_183() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) return true;
    }
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(MM_PROCESS_IF_EMPTY_DATA_VALUE)) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(MM_SKIP_IF_EMPTY_DATA_VALUE)) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_scan_token(MM_WARNING_IF_EMPTY_DATA_VALUE)) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_scan_token(MM_ERROR_IF_EMPTY_DATA_VALUE)) return true;
    return false;
  }

  private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(MM_ERROR_IF_NOT_EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(MM_WARNING_IF_NOT_EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(MM_SKIP_IF_NOT_EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(MM_CREATE_IF_NOT_EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_scan_token(FLOAT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(MM_ERROR_IF_EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(MM_WARNING_IF_EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(MM_SKIP_IF_EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(MM_RESOLVE_IF_EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_3R_182()) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_3R_181()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_scan_token(MM_PROCESS_IF_EMPTY_LOCATION)) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_scan_token(MM_SKIP_IF_EMPTY_LOCATION)) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(MM_WARNING_IF_EMPTY_LOCATION)) return true;
    return false;
  }

  private boolean jj_3R_155() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(MM_ERROR_IF_EMPTY_LOCATION)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_3R_198()) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_scan_token(MM_DATA_VALUE)) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_scan_token(RDFS_LABEL)) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_scan_token(RDF_ID)) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    }
    return false;
  }

  private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_196()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(MM_LOCATION_WITH_DUPLICATES)) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(MM_LOCATION)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(OWL_DATA_PROPERTY)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(OWL_OBJECT_PROPERTY)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(OWL_THING)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(OWL_CLASS)) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_192()) return true;
    return false;
  }

  private boolean jj_3R_184() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) return true;
    }
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(RDF_PROPERTY)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(RDFS_CLASS)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(131)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(132)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(130)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_scan_token(130)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(131)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    if (jj_scan_token(132)) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_scan_token(QUOTED_NAME_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(136)) return true;
    if (jj_3R_110()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(131)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(132)) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_scan_token(130)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) return true;
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_180()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(131)) return true;
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_197()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(132)) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_scan_token(130)) return true;
    if (jj_3R_201()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(SOME)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_scan_token(MM_PREPEND)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(138)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) jj_scanpos = xsp;
    if (jj_scan_token(139)) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_scan_token(MM_APPEND)) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_scan_token(MM_REPLACE_FIRST)) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_scan_token(MM_REPLACE_ALL)) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_scan_token(MM_REPLACE)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_scan_token(MM_CAPTURING)) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_scan_token(MM_REVERSE)) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_scan_token(MM_TRIM)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(SOME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_scan_token(MM_TO_LOWER_CASE)) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_scan_token(MM_TO_UPPER_CASE)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(ONLY)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(ONLY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(131)) return true;
    if (jj_3R_201()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_202()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(132)) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_3R_201()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(EXACTLY)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_scan_token(137)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) return true;
    }
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(VALUE)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_scan_token(CELL_WILDCARD)) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_scan_token(MM_NULL)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_scan_token(135)) return true;
    if (jj_scan_token(137)) return true;
    if (jj_scan_token(MM_NULL)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(MM_NAMESPACE)) return true;
    if (jj_scan_token(137)) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_scan_token(137)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(MIN)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(XML_LANG)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) return true;
    }
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(MAX)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(MM_PREFIX)) return true;
    if (jj_scan_token(137)) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(MM_DEFAULT_LABEL)) return true;
    if (jj_scan_token(137)) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(MM_DEFAULT_ID)) return true;
    if (jj_scan_token(137)) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_34()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_3R_173()) return true;
    if (jj_scan_token(135)) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(MM_DEFAULT_LOCATION_VALUE)) return true;
    if (jj_scan_token(137)) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_151() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_169()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) return true;
    }
    return false;
  }

  private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) return true;
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(MM_DEFAULT_DATA_VALUE)) return true;
    if (jj_scan_token(137)) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MappingMasterParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[65];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40006000,0x0,0x40006000,0x0,0x0,0x18000,0x18000,0x80000,0x0,0x0,0x20000,0x40000,0x80000,0x100000,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x80000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0xfc00000,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xfe580000,0xfe580000,0x0,0x4e000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7fa,0x7fa,0x5f000,0x0,0x5f000,0x7fa,0x4c000,0x0,0x4f000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x300,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f0,0xf8fffc06,0x0,0xf8fffc06,0x3f0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf8000000,0x8,0x0,0x0,0xffc00,0xffc00,0xffc00,0x0,0x0,0xffc00,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x6000000,0x0,0x6000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6000000,0x6000000,0x6000000,0x2f000000,0x29000000,0x0,0x0,0x6000000,0x6000000,0x6000000,0x2000000,0x4000000,0x7000000,0x0,0x6000000,0x6000000,0x0,0x0,0xffffff,0x6000000,0xffffff,0x0,0x0,0x0,0x0,0xf,0xf0000,0xf00000,0xf0,0xf000,0xf00,0x0,0x1000000,0x0,0x0,0x1000000,0x1000000,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x128,0x0,0x128,0x0,0x0,0x0,0x0,0x0,0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x4,0x4,0x4,0x4,0x100,0x100,0x0,0x100,0x0,0x0,0x0,0x128,0x100,0x100,0x0,0x2,0x2,0x0,0x108,0x108,0x0,0x0,0x400,0x128,0x400,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x280,0x4,0x508,0x500,0x0,0x4,0x4,0x400,0x100,0x100,0x100,0x4,0x4,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[12];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MappingMasterParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MappingMasterParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MappingMasterParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MappingMasterParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MappingMasterParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MappingMasterParser(MappingMasterParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MappingMasterParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[140];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 65; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 140; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
