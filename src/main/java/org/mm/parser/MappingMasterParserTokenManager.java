/* MappingMasterParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. MappingMasterParserTokenManager.java */
package org.mm.parser;
import org.mm.core.settings.ReferenceSettings;
import java.util.*;

/** Token Manager. */
@SuppressWarnings("unused")public class MappingMasterParserTokenManager implements MappingMasterParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x100L) != 0L)
            return 22;
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            return 86;
         }
         if ((active1 & 0x21000L) != 0L)
         {
            jjmatchedKind = 139;
            return 71;
         }
         if ((active1 & 0x14000L) != 0L)
         {
            jjmatchedKind = 139;
            return 48;
         }
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 139;
            return 169;
         }
         if ((active0 & 0x1cfffe00000000L) != 0L || (active1 & 0x600L) != 0L)
         {
            jjmatchedKind = 139;
            return 261;
         }
         if ((active0 & 0x140L) != 0L)
         {
            jjmatchedKind = 147;
            return 2;
         }
         if ((active0 & 0xffe3000000000000L) != 0L || (active1 & 0xfffffffffffc00ffL) != 0L || (active2 & 0x1ffL) != 0L)
         {
            jjmatchedKind = 139;
            return 220;
         }
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 139;
            return 154;
         }
         return -1;
      case 1:
         if ((active0 & 0x40L) != 0L)
            return 22;
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 1;
            return 168;
         }
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 1;
            return 70;
         }
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 1;
            return 85;
         }
         if ((active0 & 0xfffffffe00000000L) != 0L || (active1 & 0xffffffffffff66ffL) != 0L || (active2 & 0x1ffL) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 1;
            return 261;
         }
         if ((active0 & 0x100L) != 0L)
            return 0;
         return -1;
      case 2:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 2;
            return 167;
         }
         if ((active0 & 0xfffffffe00000000L) != 0L || (active1 & 0xfffffffffffd66ffL) != 0L || (active2 & 0x1ffL) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 2;
            return 261;
         }
         if ((active1 & 0x20000L) != 0L)
            return 261;
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 2;
            return 69;
         }
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 2;
            return 84;
         }
         return -1;
      case 3:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 3;
            return 166;
         }
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 3;
            return 83;
         }
         if ((active0 & 0xfffffffe00000000L) != 0L || (active1 & 0xfffffffffffd66ffL) != 0L || (active2 & 0x1ffL) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 3;
            return 261;
         }
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 3;
            return 68;
         }
         return -1;
      case 4:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 4;
            return 165;
         }
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 4;
            return 67;
         }
         if ((active1 & 0x800L) != 0L)
            return 262;
         if ((active0 & 0xfffffffe00000000L) != 0L || (active1 & 0xfffffffffffd66ffL) != 0L || (active2 & 0x1ffL) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 4;
            return 261;
         }
         return -1;
      case 5:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 5;
            return 164;
         }
         if ((active0 & 0xfffbfffe00000000L) != 0L || (active1 & 0xfffffffffff966ffL) != 0L || (active2 & 0x1ffL) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 5;
            return 261;
         }
         if ((active0 & 0x4000000000000L) != 0L || (active1 & 0x40000L) != 0L)
            return 261;
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 5;
            return 66;
         }
         return -1;
      case 6:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 6;
            return 65;
         }
         if ((active0 & 0xffdbfffe00000000L) != 0L || (active1 & 0xffffffffffb966ffL) != 0L || (active2 & 0x1ffL) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 6;
            return 261;
         }
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 6;
            return 163;
         }
         if ((active0 & 0x20000000000000L) != 0L || (active1 & 0x400000L) != 0L)
            return 261;
         return -1;
      case 7:
         if ((active1 & 0x1000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 7;
            }
            return 64;
         }
         if ((active1 & 0x8000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 7;
            }
            return 162;
         }
         if ((active0 & 0x102c4800000000L) != 0L || (active1 & 0x10000L) != 0L)
            return 261;
         if ((active0 & 0xffcbd3b600000000L) != 0L || (active1 & 0xffffffffffb866ffL) != 0L || (active2 & 0x1ffL) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 7;
            }
            return 261;
         }
         return -1;
      case 8:
         if ((active0 & 0xffcbd72600000000L) != 0L || (active1 & 0xffffffffbf3866bfL) != 0L || (active2 & 0x1ffL) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 8;
            return 261;
         }
         if ((active0 & 0x9000000000L) != 0L || (active1 & 0x40800040L) != 0L)
            return 261;
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 8;
            return 161;
         }
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 8;
            return 63;
         }
         return -1;
      case 9:
         if ((active0 & 0xff83d62400000000L) != 0L || (active1 & 0xffffcfff0338649fL) != 0L || (active2 & 0x1ffL) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 9;
            }
            return 261;
         }
         if ((active1 & 0x1000L) != 0L)
            return 263;
         if ((active0 & 0x48010200000000L) != 0L || (active1 & 0x3000bc000220L) != 0L)
            return 261;
         if ((active1 & 0x8000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 9;
            }
            return 160;
         }
         return -1;
      case 10:
         if ((active0 & 0x3022400000000L) != 0L || (active1 & 0x100000000L) != 0L)
            return 261;
         if ((active0 & 0xff80d40000000000L) != 0L || (active1 & 0xffffcffe3338e49fL) != 0L || (active2 & 0x1ffL) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 10;
            }
            return 261;
         }
         return -1;
      case 11:
         if ((active0 & 0xff81c00000000000L) != 0L || (active1 & 0xffff0f7e3130a01fL) != 0L || (active2 & 0x1ffL) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 11;
            return 261;
         }
         if ((active0 & 0x140000000000L) != 0L || (active1 & 0xc08002084480L) != 0L)
            return 261;
         return -1;
      case 12:
         if ((active0 & 0xff81c00000000000L) != 0L || (active1 & 0xfffe0f662130a01fL) != 0L || (active2 & 0x1ffL) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 12;
            return 261;
         }
         if ((active1 & 0x1001810000000L) != 0L)
            return 261;
         return -1;
      case 13:
         if ((active0 & 0x400000000000L) != 0L || (active1 & 0x302000L) != 0L)
            return 261;
         if ((active0 & 0xff81800000000000L) != 0L || (active1 & 0xfffe0f662100801fL) != 0L || (active2 & 0x1ffL) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 13;
            return 261;
         }
         return -1;
      case 14:
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x10020000000L) != 0L)
            return 261;
         if ((active0 & 0xbf81800000000000L) != 0L || (active1 & 0xfffe0e660100801fL) != 0L || (active2 & 0x1ffL) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 14;
            return 261;
         }
         return -1;
      case 15:
         if ((active0 & 0xbf81000000000000L) != 0L || (active1 & 0xeffe0c660000801fL) != 0L || (active2 & 0x1ffL) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 15;
            return 261;
         }
         if ((active0 & 0x800000000000L) != 0L || (active1 & 0x1000020001000000L) != 0L)
            return 261;
         return -1;
      case 16:
         if ((active1 & 0x400004000000002L) != 0L)
            return 261;
         if ((active0 & 0xbf81000000000000L) != 0L || (active1 & 0xebfe0c260000801dL) != 0L || (active2 & 0x1ffL) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 16;
            return 261;
         }
         return -1;
      case 17:
         if ((active1 & 0x80600008000L) != 0L)
            return 261;
         if ((active0 & 0xbf81000000000000L) != 0L || (active1 & 0xebfe04200000001dL) != 0L || (active2 & 0x1ffL) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 17;
            return 261;
         }
         return -1;
      case 18:
         if ((active0 & 0xbf81000000000000L) != 0L || (active1 & 0xe1fe00200000001dL) != 0L || (active2 & 0x1feL) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 18;
            return 261;
         }
         if ((active1 & 0xa00040000000000L) != 0L || (active2 & 0x1L) != 0L)
            return 261;
         return -1;
      case 19:
         if ((active1 & 0x4000000000000004L) != 0L)
            return 261;
         if ((active0 & 0xbf81000000000000L) != 0L || (active1 & 0xa1fe002000000019L) != 0L || (active2 & 0x1feL) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 19;
            return 261;
         }
         return -1;
      case 20:
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x100000000000000L) != 0L)
            return 261;
         if ((active0 & 0xbe81000000000000L) != 0L || (active1 & 0xa0fe002000000019L) != 0L || (active2 & 0x1feL) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 20;
            return 261;
         }
         return -1;
      case 21:
         if ((active0 & 0x3a81000000000000L) != 0L || (active1 & 0xb6002000000019L) != 0L || (active2 & 0x1feL) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 21;
            return 261;
         }
         if ((active0 & 0x8400000000000000L) != 0L || (active1 & 0xa048000000000000L) != 0L)
            return 261;
         return -1;
      case 22:
         if ((active0 & 0x3801000000000000L) != 0L || (active1 & 0xb4000000000018L) != 0L || (active2 & 0x1feL) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 22;
            return 261;
         }
         if ((active0 & 0x280000000000000L) != 0L || (active1 & 0x2002000000001L) != 0L)
            return 261;
         return -1;
      case 23:
         if ((active1 & 0xa0000000000000L) != 0L || (active2 & 0x4L) != 0L)
            return 261;
         if ((active0 & 0x3801000000000000L) != 0L || (active1 & 0x14000000000018L) != 0L || (active2 & 0x1faL) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 23;
            return 261;
         }
         return -1;
      case 24:
         if ((active0 & 0x3800000000000000L) != 0L || (active1 & 0x18L) != 0L || (active2 & 0x1eaL) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 24;
            return 261;
         }
         if ((active0 & 0x1000000000000L) != 0L || (active1 & 0x14000000000000L) != 0L || (active2 & 0x10L) != 0L)
            return 261;
         return -1;
      case 25:
         if ((active0 & 0x3800000000000000L) != 0L || (active1 & 0x18L) != 0L || (active2 & 0x1eaL) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 25;
            return 261;
         }
         return -1;
      case 26:
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x8L) != 0L || (active2 & 0xaL) != 0L)
            return 261;
         if ((active0 & 0x3000000000000000L) != 0L || (active1 & 0x10L) != 0L || (active2 & 0x1e0L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 26;
            return 261;
         }
         return -1;
      case 27:
         if ((active0 & 0x3000000000000000L) != 0L || (active1 & 0x10L) != 0L || (active2 & 0x1e0L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 27;
            return 261;
         }
         return -1;
      case 28:
         if ((active0 & 0x3000000000000000L) != 0L || (active1 & 0x10L) != 0L || (active2 & 0x1e0L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 28;
            return 261;
         }
         return -1;
      case 29:
         if ((active2 & 0x40L) != 0L)
            return 261;
         if ((active0 & 0x3000000000000000L) != 0L || (active1 & 0x10L) != 0L || (active2 & 0x1a0L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 29;
            return 261;
         }
         return -1;
      case 30:
         if ((active0 & 0x1000000000000000L) != 0L || (active2 & 0x100L) != 0L)
            return 261;
         if ((active0 & 0x2000000000000000L) != 0L || (active1 & 0x10L) != 0L || (active2 & 0xa0L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 30;
            return 261;
         }
         return -1;
      case 31:
         if ((active0 & 0x2000000000000000L) != 0L || (active1 & 0x10L) != 0L || (active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 31;
            return 261;
         }
         if ((active2 & 0x20L) != 0L)
            return 261;
         return -1;
      case 32:
         if ((active1 & 0x10L) != 0L || (active2 & 0x80L) != 0L)
            return 261;
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 32;
            return 261;
         }
         return -1;
      case 33:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 33;
            return 261;
         }
         return -1;
      case 34:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 34;
            return 261;
         }
         return -1;
      case 35:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 35;
            return 261;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 153);
      case 40:
         return jjStopAtPos(0, 149);
      case 41:
         return jjStopAtPos(0, 150);
      case 42:
         return jjStartNfaWithStates_0(0, 72, 22);
      case 44:
         return jjStopAtPos(0, 148);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x140L, 0x0L, 0x0L);
      case 61:
         return jjStopAtPos(0, 155);
      case 64:
         return jjStopAtPos(0, 154);
      case 91:
         return jjStopAtPos(0, 156);
      case 93:
         return jjStopAtPos(0, 157);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x14000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x21000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0xffe3000000000000L, 0xfffffffffffc00ffL, 0x1ffL);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0xcc00000000000L, 0x600L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x103ffe00000000L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 151);
      case 125:
         return jjStopAtPos(0, 152);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 0);
         break;
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 6, 22);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x14000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0xcc00000000000L, active1, 0x600L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0xfff3000000000000L, active1, 0xfffffffffffc00ffL, active2, 0x1ffL);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x9000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x3ffe00000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa3_0(active0, 0xffe3000000000000L, active1, 0xfffffffffffc00ffL, active2, 0x1ffL);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x3ffe00000000L, active1, 0x1000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0xcc00000000000L, active1, 0x600L, active2, 0L);
      case 73:
      case 105:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 81, 261);
         break;
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x14000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa4_0(active0, 0x14fffe00000000L, active1, 0x400L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40014000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x202000000L, active2, 0x20L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0xff80000000000000L, active1, 0xfe00100001fL, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4442000000082000L, active2, 0x110L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x41000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x43000000000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0x100100000080L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2230000080800040L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x3c000000L, active2, 0x2L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0x1109e00400000a00L, active2, 0x45L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x700000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000020L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8884000000000000L, active2, 0x88L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0x200L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8884001202000080L, active2, 0x88L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x20800000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x350400000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0xff80000000000000L, active1, 0xfe03d00001fL, active2, 0x2L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1e00000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x44002000000000L, active1, 0L, active2, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1108000000000000L, active2, 0x45L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x10004000000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400080020L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000000000L, active1, 0x100100300000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0x40004400L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x6672000080c40040L, active2, 0x130L);
      case 83:
      case 115:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 75, 262);
         return jjMoveStringLiteralDfa5_0(active0, 0x1200000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0x18000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0x800000000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x10240000000000L, active1, 0x400008000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x3000000000000L, active1, 0x1000200L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 261);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0x180000040L, active2, 0x20L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0xff80000000000000L, active1, 0xfe00000001fL, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 82, 261);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0x1109e00800c01000L, active2, 0x45L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x28808000000000L, active1, 0x200000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0x200000080L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x34000000000L, active1, 0x2230000000000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x7a000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xccc6000000004400L, active2, 0x198L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x101000000000L, active2, 0x2L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000200000000L, active1, 0x82020L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0x100000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0x10000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0xff8b800000000000L, active1, 0xfe00000001fL, active2, 0x20L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0x2230000000000000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800001000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active1, 0x244000080L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1e00000000040L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x101000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1080000L, active2, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 261);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L, active1, 0x38000200L, active2, 0L);
      case 77:
      case 109:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 86, 261);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x10004000000000L, active1, 0x8884000100800000L, active2, 0x88L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x29000000000L, active1, 0x4442000000204400L, active2, 0x112L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1108000080112000L, active2, 0x45L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x100200000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x242800000000L, active1, 0x2008000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x108000000000L, active1, 0x38000200L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x8010000000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 261);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 43, 261);
         else if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 80, 261);
         return jjMoveStringLiteralDfa8_0(active0, 0x42000000000L, active1, 0x2230001c80000000L, active2, 0L);
      case 71:
      case 103:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 38, 261);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 261);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x800600000000L, active1, 0x998c100000008040L, active2, 0xcdL);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x420000000000L, active1, 0x200000000L, active2, 0x2L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x104420L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x40001000000000L, active1, 0x4442000004002000L, active2, 0x110L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x3000000000000L, active1, 0x1e00000880000L, active2, 0x20L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0xff80000000000000L, active1, 0xfe00200101fL, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L, active1, 0x1001000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x638000000L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 94, 261);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x8020000000000L, active1, 0x304420L, active2, 0x20L);
      case 70:
      case 102:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 87, 261);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1108100000000000L, active2, 0x45L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x3400000000000L, active1, 0x4442000000000000L, active2, 0x110L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0xff80010000000000L, active1, 0x8fe00000001fL, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x800200000000L, active1, 0x8884001880000000L, active2, 0x88L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000a000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000002000000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2230000004000200L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 36, 261);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 39, 261);
         return jjMoveStringLiteralDfa9_0(active0, 0x140000000000L, active1, 0L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 88:
      case 120:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(8, 70, 261);
         break;
      case 89:
      case 121:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x20400000000L, active1, 0x600000080L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1800000000L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(9, 69, 261);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(9, 95, 261);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 40, 261);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 90, 261);
         else if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000L, active1, 0x1108800030000000L, active2, 0x3L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4442000000000000L, active2, 0x110L);
      case 71:
      case 103:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(9, 33, 261);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8884000000000000L, active2, 0x88L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x140000000000L, active1, 0x1000002080000L, active2, 0x20L);
      case 76:
      case 108:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 51, 261);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 54, 261);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(9, 76, 263);
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000L, active1, 0x1000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x3000000000000L, active1, 0x400000000000L, active2, 0x44L);
      case 80:
      case 112:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 109, 261);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x304400L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(9, 73, 261);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2230000000000000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 108, 261);
         return jjMoveStringLiteralDfa10_0(active0, 0xff80400000000000L, active1, 0xfe00000001fL, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000000L, active1, 0x10000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x300080L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(10, 96, 261);
         return jjMoveStringLiteralDfa11_0(active0, 0x8000400000000000L, active1, 0x4442000000002007L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800021000000L, active2, 0x20L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x100800000000000L, active1, 0xaab4008000000018L, active2, 0x8aL);
      case 76:
      case 108:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(10, 34, 261);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x96000000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000L, active1, 0x1108000000000000L, active2, 0x1L);
      case 78:
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 41, 261);
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000L, active1, 0x40002000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000L, active1, 0x1800000000L, active2, 0x110L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0xc00000000000000L, active1, 0x20000008000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 37, 261);
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000000L, active1, 0x80000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000000L, active1, 0x600000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4400L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400000000000L, active2, 0x44L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2);
      return 11;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x1080000000000000L, active1, 0xd0000300000L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 103, 261);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1800000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 42, 261);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(11, 71, 261);
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000000L, active1, 0x600000000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0xaab4000000000018L, active2, 0x8aL);
      case 71:
      case 103:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(11, 89, 261);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000000L, active1, 0x1000000000000L, active2, 0L);
      case 73:
      case 105:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(11, 83, 261);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4020000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x10000000L, active2, 0x44L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000000L, active1, 0x4442000000000007L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 44, 261);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 110, 261);
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2001000000L, active2, 0x20L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1108000000000000L, active2, 0x1L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0xd00400000000000L, active1, 0x2000000a000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 111, 261);
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000L, active1, 0L, active2, 0x110L);
      case 89:
      case 121:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(11, 74, 261);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(11, 78, 261);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2);
      return 12;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000000L, active1, 0L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(12, 99, 261);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 100, 261);
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000L, active1, 0xaab4020600000000L, active2, 0x44L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x4101000000000000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(12, 92, 261);
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000000L, active1, 0L, active2, 0x110L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000000L, active1, 0x80000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0xc00000000000000L, active1, 0x8018L, active2, 0x8aL);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000000L, active1, 0x4442000000000007L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x21000000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x300000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 112, 261);
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000000L, active1, 0x1108004000002000L, active2, 0x1L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, active2);
      return 13;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000000000L, active1, 0x2000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(13, 84, 261);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(13, 85, 261);
         return jjMoveStringLiteralDfa14_0(active0, 0x300000000000000L, active1, 0x54000000000L, active2, 0x110L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000000000L, active1, 0x20000000000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 46, 261);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0xaab4000001000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x600000000L, active2, 0x44L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0xc00000000000000L, active1, 0x8000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x20000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x8001000000000000L, active1, 0x4442000000000007L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x18L, active2, 0x8aL);
      case 89:
      case 121:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(13, 77, 261);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1108000000000000L, active2, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, active2);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(12, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, active2);
      return 14;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000000L, active1, 0x1000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x600000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0xc80000000000000L, active1, 0x8000L, active2, 0x20L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x1000020000000000L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 104, 261);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x108000000000018L, active2, 0x8bL);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000000000000L, active1, 0L, active2, 0x110L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000000000L, active1, 0xaab4000000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000000000000L, active1, 0x4000000000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 62, 261);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(14, 93, 261);
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000000000L, active1, 0x2000000000L, active2, 0x44L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000000000000L, active1, 0x4442000000000007L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, active2);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(13, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1, active2);
      return 15;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000000000000L, active1, 0x84000000000L, active2, 0x1L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa16_0(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 124, 261);
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x280000000000000L, active1, 0x18L, active2, 0x8aL);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x500002000000002L, active2, 0x44L);
      case 76:
      case 108:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 47, 261);
         return jjMoveStringLiteralDfa16_0(active0, 0x8000000000000000L, active1, 0x4042000000000005L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x8000600000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0x1c00000000000000L, active1, 0x8000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(15, 88, 261);
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0xaab4000000000000L, active2, 0x110L);
      case 88:
      case 120:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 105, 261);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1, active2);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(14, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1, active2);
      return 16;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x4000040000000004L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0x1L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(16, 65, 261);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 122, 261);
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x600000000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000000000000000L, active1, 0x40000000000000L, active2, 0x110L);
      case 76:
      case 108:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 102, 261);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa17_0(active0, 0x280000000000000L, active1, 0x18L, active2, 0x8aL);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x1100000000000000L, active1, 0x2002000000001L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x2c00000000000000L, active1, 0x100000000008000L, active2, 0x64L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0xaab4000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1, active2);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(15, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1, active2);
      return 17;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x4000000000000004L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa18_0(active0, 0x280000000000000L, active1, 0x2040000000001L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa18_0(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(17, 97, 261);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(17, 98, 261);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 107, 261);
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x100000000000000L, active2, 0x1L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000000000000L, active1, 0xa00000000000000L, active2, 0x20L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0xa0b4000000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa18_0(active0, 0x1001000000000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0x8000000000000000L, active1, 0x40000000000018L, active2, 0x19aL);
      case 89:
      case 121:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(17, 79, 261);
         return jjMoveStringLiteralDfa18_0(active0, 0xc00000000000000L, active1, 0L, active2, 0x44L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1, active2);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(16, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, active1, active2);
      return 18;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0xa002000000000001L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 121, 261);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 123, 261);
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 69:
      case 101:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 106, 261);
         return jjMoveStringLiteralDfa19_0(active0, 0x9200000000000000L, active1, 0x4040000000000004L, active2, 0x4L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0x100000000000000L, active1, 0xa0000000000018L, active2, 0x8aL);
      case 76:
      case 108:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(18, 128, 261);
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x2080000000000000L, active1, 0x14000000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x400000000000000L, active1, 0x8000000000000L, active2, 0x20L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa19_0(active0, 0x800000000000000L, active1, 0x2000000000L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0L, active2, 0x110L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, active1, active2);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(17, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, active1, active2);
      return 19;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa20_0(active0, 0x800000000000000L, active1, 0x100002000000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0xa000000000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x14000000000000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa20_0(active0, 0x80000000000000L, active1, 0L, active2, 0x100L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x1000000000000L, active1, 0x8000000000000L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(19, 66, 261);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 126, 261);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa20_0(active0, 0x2100000000000000L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa20_0(active0, 0x9000000000000000L, active1, 0x40000000000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa20_0(active0, 0x200000000000000L, active1, 0xa2000000000019L, active2, 0x8aL);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa20_0(active0, 0x400000000000000L, active1, 0L, active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, active1, active2);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(18, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, active1, active2);
      return 20;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa21_0(active0, 0x8000000000000000L, active1, 0x54000000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa21_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0xa0a0000000000000L, active2, 0x40L);
      case 71:
      case 103:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(20, 56, 261);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0x80000000000000L, active1, 0x2000000000001L, active2, 0x4L);
      case 76:
      case 108:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(20, 120, 261);
         return jjMoveStringLiteralDfa21_0(active0, 0x800000000000000L, active1, 0x2000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x8000000000000L, active2, 0x100L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa21_0(active0, 0x2400000000000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa21_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa21_0(active0, 0x200000000000000L, active1, 0x18L, active2, 0x8aL);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, active1, active2);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(19, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, active1, active2);
      return 21;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa22_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x10L, active2, 0x80L);
      case 69:
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 58, 261);
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x8L, active2, 0x10aL);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 76:
      case 108:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 63, 261);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 118, 261);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 125, 261);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 127, 261);
         break;
      case 78:
      case 110:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 115, 261);
         return jjMoveStringLiteralDfa22_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x2000000000001L, active2, 0x20L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa22_0(active0, 0x200000000000000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa22_0(active0, 0x2000000000000000L, active1, 0xa0000000000000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0L, active2, 0x44L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x14000000000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa22_0(active0, 0x800000000000000L, active1, 0x2000000000L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa22_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, active1, active2);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(20, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, active1, active2);
      return 22;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0xa0000000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(22, 57, 261);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(22, 101, 261);
         return jjMoveStringLiteralDfa23_0(active0, 0x800000000000000L, active1, 0L, active2, 0x20L);
      case 71:
      case 103:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(22, 55, 261);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x14000000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(22, 64, 261);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(22, 113, 261);
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa23_0(active0, 0x2000000000000000L, active1, 0x10L, active2, 0x80L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0L, active2, 0x110L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa23_0(active0, 0x1000000000000L, active1, 0L, active2, 0x4L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa23_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x8L, active2, 0xaL);
      default :
         break;
   }
   return jjStartNfa_0(21, active0, active1, active2);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(21, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, active1, active2);
      return 23;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa24_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa24_0(active0, 0x1000000000000L, active1, 0x10L, active2, 0x80L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x8L, active2, 0xaL);
      case 76:
      case 108:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(23, 117, 261);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(23, 119, 261);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0L, active2, 0x100L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x14000000000000L, active2, 0x40L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa24_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 83:
      case 115:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(23, 130, 261);
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa24_0(active0, 0x800000000000000L, active1, 0L, active2, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0, active1, active2);
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(22, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, active1, active2);
      return 24;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa25_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa25_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(24, 114, 261);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(24, 116, 261);
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0L, active2, 0x100L);
      case 83:
      case 115:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(24, 48, 261);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(24, 132, 261);
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x18L, active2, 0x8aL);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa25_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0, active1, active2);
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(23, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0, active1, active2);
      return 25;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x10L, active2, 0x80L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa26_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa26_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x8L, active2, 0x10aL);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa26_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0, active1, active2);
}
private int jjMoveStringLiteralDfa26_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(24, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0, active1, active2);
      return 26;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(26, 59, 261);
         return jjMoveStringLiteralDfa27_0(active0, 0x1000000000000000L, active1, 0L, active2, 0x100L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0x10L, active2, 0x80L);
      case 83:
      case 115:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(26, 67, 261);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(26, 129, 261);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(26, 131, 261);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa27_0(active0, 0x2000000000000000L, active1, 0L, active2, 0x20L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0L, active2, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0, active1, active2);
}
private int jjMoveStringLiteralDfa27_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(25, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0, active1, active2);
      return 27;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa28_0(active0, 0x1000000000000000L, active1, 0x10L, active2, 0x80L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0L, active2, 0x100L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa28_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0, active1, active2);
}
private int jjMoveStringLiteralDfa28_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(26, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0, active1, active2);
      return 28;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa29_0(active0, 0L, active1, 0x10L, active2, 0x80L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa29_0(active0, 0L, active1, 0L, active2, 0x100L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa29_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa29_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa29_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa29_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0, active1, active2);
}
private int jjMoveStringLiteralDfa29_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(27, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0, active1, active2);
      return 29;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa30_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa30_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa30_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa30_0(active0, 0L, active1, 0L, active2, 0x100L);
      case 84:
      case 116:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(29, 134, 261);
         break;
      case 88:
      case 120:
         return jjMoveStringLiteralDfa30_0(active0, 0L, active1, 0x10L, active2, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0, active1, active2);
}
private int jjMoveStringLiteralDfa30_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(28, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0, active1, active2);
      return 30;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(30, 60, 261);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa31_0(active0, 0L, active1, 0x10L, active2, 0x80L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa31_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa31_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 84:
      case 116:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(30, 136, 261);
         break;
      default :
         break;
   }
   return jjStartNfa_0(29, active0, active1, active2);
}
private int jjMoveStringLiteralDfa31_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(29, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, active0, active1, active2);
      return 31;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         return jjMoveStringLiteralDfa32_0(active0, 0L, active1, 0x10L, active2, 0x80L);
      case 84:
      case 116:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(31, 133, 261);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa32_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(30, active0, active1, active2);
}
private int jjMoveStringLiteralDfa32_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(30, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, active0, active1, active2);
      return 32;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa33_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(32, 68, 261);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(32, 135, 261);
         break;
      default :
         break;
   }
   return jjStartNfa_0(31, active0, active1, active2);
}
private int jjMoveStringLiteralDfa33_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(31, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, active0, 0L, 0L);
      return 33;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa34_0(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(32, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa34_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(32, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, active0, 0L, 0L);
      return 34;
   }
   switch(curChar)
   {
      case 89:
      case 121:
         return jjMoveStringLiteralDfa35_0(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(33, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa35_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(33, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, active0, 0L, 0L);
      return 35;
   }
   switch(curChar)
   {
      case 80:
      case 112:
         return jjMoveStringLiteralDfa36_0(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(34, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa36_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(34, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(35, active0, 0L, 0L);
      return 36;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(36, 61, 261);
         break;
      default :
         break;
   }
   return jjStartNfa_0(35, active0, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 261;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 169:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 163:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 64:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 86:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 220:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 261:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 66:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 166:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 160:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 63:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 68:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 2:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 167:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 65:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 67:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 83:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 3:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(0, 6); }
                  else if (curChar == 60)
                     { jjCheckNAddTwoStates(15, 16); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(7, 10); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 141)
                        kind = 141;
                     { jjCheckNAddStates(11, 18); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAddStates(19, 24); }
                  else if (curChar == 46)
                     { jjCheckNAdd(18); }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 70:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 164:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 85:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 69:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 71:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 263:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if (curChar == 58)
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  if (curChar == 58)
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  break;
               case 165:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 48:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 84:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 161:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 168:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 154:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 162:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 262:
                  if ((0x7ffe40800000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if (curChar == 58)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  if (curChar == 58)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 4:
                  if (curChar == 34)
                     { jjCheckNAddStates(7, 10); }
                  break;
               case 5:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(7, 10); }
                  break;
               case 6:
                  if (curChar == 34)
                     { jjCheckNAddStates(25, 28); }
                  break;
               case 7:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(25, 28); }
                  break;
               case 9:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 11:
                  if (curChar == 34 && kind > 137)
                     kind = 137;
                  break;
               case 13:
                  if ((0x7ffe00800000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  { jjCheckNAdd(13); }
                  break;
               case 14:
                  if (curChar == 60)
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 15:
                  if ((0xaffffffa00000000L & l) != 0L)
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 16:
                  if (curChar == 62 && kind > 140)
                     kind = 140;
                  break;
               case 17:
                  if (curChar == 46)
                     { jjCheckNAdd(18); }
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 143)
                     kind = 143;
                  { jjCheckNAddTwoStates(18, 19); }
                  break;
               case 20:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(21); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 143)
                     kind = 143;
                  { jjCheckNAdd(21); }
                  break;
               case 22:
                  if ((0x7ffe40800000000L & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  { jjCheckNAdd(22); }
                  break;
               case 36:
                  if (curChar == 58 && kind > 21)
                     kind = 21;
                  break;
               case 62:
                  if (curChar == 58 && kind > 14)
                     kind = 14;
                  break;
               case 82:
                  if (curChar == 58 && kind > 13)
                     kind = 13;
                  break;
               case 91:
                  if (curChar == 39)
                     { jjCheckNAddStates(0, 6); }
                  break;
               case 92:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(29, 31); }
                  break;
               case 93:
                  if (curChar == 39)
                     { jjCheckNAddStates(32, 34); }
                  break;
               case 94:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(32, 34); }
                  break;
               case 96:
                  if (curChar == 39 && kind > 138)
                     kind = 138;
                  break;
               case 97:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(97, 98); }
                  break;
               case 98:
                  if (curChar == 39 && kind > 139)
                     kind = 139;
                  break;
               case 99:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(99, 100); }
                  break;
               case 100:
                  if (curChar == 39 && kind > 147)
                     kind = 147;
                  break;
               case 101:
                  if (curChar == 45)
                     { jjCheckNAddStates(19, 24); }
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 141)
                     kind = 141;
                  { jjCheckNAdd(102); }
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  { jjCheckNAdd(103); }
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(104, 105); }
                  break;
               case 105:
                  if (curChar == 46)
                     { jjCheckNAdd(106); }
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 143)
                     kind = 143;
                  { jjCheckNAddTwoStates(106, 107); }
                  break;
               case 108:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(109); }
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 143)
                     kind = 143;
                  { jjCheckNAdd(109); }
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(110, 111); }
                  break;
               case 112:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(113); }
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 143)
                     kind = 143;
                  { jjCheckNAdd(113); }
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 143)
                     kind = 143;
                  { jjCheckNAddTwoStates(114, 115); }
                  break;
               case 116:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(117); }
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 143)
                     kind = 143;
                  { jjCheckNAdd(117); }
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 141)
                     kind = 141;
                  { jjCheckNAddStates(11, 18); }
                  break;
               case 120:
                  if (curChar == 58 && kind > 17)
                     kind = 17;
                  break;
               case 137:
                  if (curChar == 58 && kind > 18)
                     kind = 18;
                  break;
               case 159:
                  if (curChar == 58 && kind > 19)
                     kind = 19;
                  break;
               case 184:
                  if (curChar == 58 && kind > 15)
                     kind = 15;
                  break;
               case 226:
                  if (curChar == 58 && kind > 16)
                     kind = 16;
                  break;
               case 245:
                  if (curChar == 58 && kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 169:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(180); }
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(180); }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 178;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 163:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 172;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 86:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 220:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(222); }
                  else if ((0x20000000200L & l) != 0L)
                     { jjCheckNAdd(219); }
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(222); }
                  else if ((0x20000000200L & l) != 0L)
                     { jjCheckNAdd(219); }
                  break;
               case 261:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 66:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 166:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 175;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 160:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(159); }
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(159); }
                  break;
               case 63:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(62); }
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(62); }
                  break;
               case 68:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 2:
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  { jjCheckNAdd(22); }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  { jjCheckNAdd(22); }
                  break;
               case 167:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 176;
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 65:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 67:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 83:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(82); }
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(82); }
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(35, 40); }
                  else if ((0x200000002000L & l) != 0L)
                     { jjAddStates(41, 44); }
                  else if ((0x2000000020L & l) != 0L)
                     { jjAddStates(45, 48); }
                  else if ((0x200000002L & l) != 0L)
                     { jjAddStates(49, 52); }
                  else if ((0x800000008000L & l) != 0L)
                     { jjAddStates(53, 56); }
                  else if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(57, 60); }
                  else if ((0x4000000040L & l) != 0L)
                     { jjAddStates(61, 64); }
                  else if ((0x800000008L & l) != 0L)
                     { jjAddStates(65, 66); }
                  else if ((0x20000000200L & l) != 0L)
                     { jjAddStates(67, 68); }
                  else if ((0x1000000010L & l) != 0L)
                     { jjAddStates(69, 70); }
                  else if ((0x40000000400000L & l) != 0L)
                     { jjAddStates(71, 72); }
                  else if ((0x400000004000L & l) != 0L)
                     { jjAddStates(73, 74); }
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 164:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 173;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 85:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 69:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 71:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 263:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 165:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 174;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 48:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 84:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 161:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 170;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 168:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x1000000010L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  else if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 177;
                  if ((0x1000000010L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  else if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 154:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  else if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  if ((0x4000000040000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  else if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 162:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 171;
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 262:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(13); }
                  }
                  break;
               case 1:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 5:
                  { jjCheckNAddStates(7, 10); }
                  break;
               case 8:
                  { jjCheckNAddStates(25, 28); }
                  break;
               case 10:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  { jjCheckNAdd(13); }
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  { jjCheckNAdd(13); }
                  break;
               case 15:
                  if ((0xc7fffffeafffffffL & l) != 0L)
                     { jjAddStates(75, 76); }
                  break;
               case 19:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(77, 78); }
                  break;
               case 23:
                  if ((0x400000004000L & l) != 0L)
                     { jjAddStates(73, 74); }
                  break;
               case 24:
                  if ((0x10000000100000L & l) != 0L && kind > 30)
                     kind = 30;
                  break;
               case 25:
               case 26:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 27:
                  if ((0x40000000400000L & l) != 0L)
                     { jjAddStates(71, 72); }
                  break;
               case 28:
                  if ((0x2000000020L & l) != 0L && kind > 24)
                     kind = 24;
                  break;
               case 29:
               case 32:
                  if ((0x20000000200000L & l) != 0L)
                     { jjCheckNAdd(28); }
                  break;
               case 30:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 33:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0x1000000010L & l) != 0L)
                     { jjAddStates(69, 70); }
                  break;
               case 37:
               case 49:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(36); }
                  break;
               case 38:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 50:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if ((0x20000000200L & l) != 0L)
                     { jjAddStates(67, 68); }
                  break;
               case 72:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(62); }
                  break;
               case 73:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if ((0x800000008L & l) != 0L)
                     { jjAddStates(65, 66); }
                  break;
               case 87:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(82); }
                  break;
               case 88:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 92:
                  { jjCheckNAddStates(29, 31); }
                  break;
               case 95:
                  { jjCheckNAddStates(32, 34); }
                  break;
               case 97:
                  { jjAddStates(79, 80); }
                  break;
               case 99:
                  { jjAddStates(81, 82); }
                  break;
               case 107:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(83, 84); }
                  break;
               case 111:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(85, 86); }
                  break;
               case 115:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(87, 88); }
                  break;
               case 119:
                  if ((0x4000000040L & l) != 0L)
                     { jjAddStates(61, 64); }
                  break;
               case 121:
               case 125:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(120); }
                  break;
               case 122:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 126:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if ((0x2000000020L & l) != 0L && kind > 32)
                     kind = 32;
                  break;
               case 130:
               case 133:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(129); }
                  break;
               case 131:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 134:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(57, 60); }
                  break;
               case 138:
               case 142:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(137); }
                  break;
               case 139:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 143:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if ((0x2000000020L & l) != 0L && kind > 31)
                     kind = 31;
                  break;
               case 147:
               case 149:
                  if ((0x20000000200000L & l) != 0L)
                     { jjCheckNAdd(146); }
                  break;
               case 148:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 150:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if ((0x800000008000L & l) != 0L)
                     { jjAddStates(53, 56); }
                  break;
               case 152:
                  if ((0x200000002000000L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 153:
               case 155:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(152); }
                  break;
               case 156:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if ((0x4000000040000L & l) != 0L && kind > 29)
                     kind = 29;
                  break;
               case 158:
                  if ((0x200000002L & l) != 0L)
                     { jjAddStates(49, 52); }
                  break;
               case 170:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(159); }
                  break;
               case 171:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if ((0x1000000010L & l) != 0L && kind > 28)
                     kind = 28;
                  break;
               case 181:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(180); }
                  break;
               case 182:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(180); }
                  break;
               case 183:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(45, 48); }
                  break;
               case 185:
               case 196:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(184); }
                  break;
               case 186:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 188:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 189:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 190:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 194:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 197:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 200:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 201:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 202:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 203:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 202;
                  break;
               case 204:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 205:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 206:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 207:
                  if ((0x200000002000000L & l) != 0L && kind > 27)
                     kind = 27;
                  break;
               case 208:
               case 213:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(207); }
                  break;
               case 209:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 210:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 211:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 212:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 214:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 215:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 216:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 217:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 218:
                  if ((0x200000002000L & l) != 0L)
                     { jjAddStates(41, 44); }
                  break;
               case 219:
                  if ((0x400000004000L & l) != 0L && kind > 25)
                     kind = 25;
                  break;
               case 221:
                  if ((0x20000000200L & l) != 0L)
                     { jjCheckNAdd(219); }
                  break;
               case 222:
                  if ((0x100000001000000L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 223:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(222); }
                  break;
               case 224:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(222); }
                  break;
               case 225:
                  if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(35, 40); }
                  break;
               case 227:
               case 236:
                  if ((0x4000000040L & l) != 0L)
                     { jjCheckNAdd(226); }
                  break;
               case 228:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 229:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 228;
                  break;
               case 230:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 229;
                  break;
               case 231:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 232:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 231;
                  break;
               case 233:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 234:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 235:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 237:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 236;
                  break;
               case 238:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 237;
                  break;
               case 239:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 238;
                  break;
               case 240:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 241:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 240;
                  break;
               case 242:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 243:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 244:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 243;
                  break;
               case 246:
               case 251:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(245); }
                  break;
               case 247:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 246;
                  break;
               case 248:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 247;
                  break;
               case 249:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 248;
                  break;
               case 250:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 249;
                  break;
               case 252:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 253:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 252;
                  break;
               case 254:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 253;
                  break;
               case 255:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 256:
                  if ((0x2000000020L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 257:
               case 259:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(256); }
                  break;
               case 258:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 257;
                  break;
               case 260:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 259;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(7, 10); }
                  break;
               case 8:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(25, 28); }
                  break;
               case 15:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(75, 76); }
                  break;
               case 92:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(29, 31); }
                  break;
               case 95:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(32, 34); }
                  break;
               case 97:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(79, 80); }
                  break;
               case 99:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(81, 82); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 261 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x800L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 9)
                     kind = 9;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   92, 94, 96, 97, 98, 99, 100, 5, 7, 10, 11, 102, 103, 104, 105, 110, 
   111, 114, 115, 102, 103, 104, 17, 110, 114, 7, 8, 10, 11, 92, 94, 96, 
   94, 95, 96, 235, 244, 250, 255, 258, 260, 220, 221, 223, 224, 195, 206, 212, 
   217, 169, 179, 181, 182, 154, 156, 157, 157, 141, 145, 148, 150, 124, 128, 132, 
   135, 86, 90, 71, 80, 48, 60, 31, 34, 25, 26, 15, 16, 20, 21, 97, 
   98, 99, 100, 108, 109, 112, 113, 116, 117, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\52", null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\54", "\50", "\51", "\173", 
"\175", "\41", "\100", "\75", "\133", "\135", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 7 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                    input_stream.backup(1);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public MappingMasterParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public MappingMasterParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
   
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 261; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit( SimpleCharStream stream, int lexState)
  {
  
    ReInit( stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMENT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 2, 3, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffe001L, 0xffffffffffffffffL, 0x3ff8ffffL, 
};
static final long[] jjtoSkip = {
   0xe3eL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xe00L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x11c0L, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[261];
    private final int[] jjstateSet = new int[2 * 261];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected int curChar;
}